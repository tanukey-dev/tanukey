/* eslint @typescript-eslint/naming-convention: 0 */
/* eslint @typescript-eslint/no-explicit-any: 0 */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export type paths = {
  '/admin/meta': {
    /**
     * admin/meta
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:meta*
     */
    post: operations['admin/meta'];
  };
  '/admin/abuse-user-reports': {
    /**
     * admin/abuse-user-reports
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:abuse-user-reports*
     */
    post: operations['admin/abuse-user-reports'];
  };
  '/admin/accounts/create': {
    /**
     * admin/accounts/create
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['admin/accounts/create'];
  };
  '/admin/accounts/delete': {
    /**
     * admin/accounts/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:account*
     */
    post: operations['admin/accounts/delete'];
  };
  '/admin/accounts/find-by-email': {
    /**
     * admin/accounts/find-by-email
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:account*
     */
    post: operations['admin/accounts/find-by-email'];
  };
  '/admin/ad/create': {
    /**
     * admin/ad/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:ad*
     */
    post: operations['admin/ad/create'];
  };
  '/admin/ad/delete': {
    /**
     * admin/ad/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:ad*
     */
    post: operations['admin/ad/delete'];
  };
  '/admin/ad/list': {
    /**
     * admin/ad/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:ad*
     */
    post: operations['admin/ad/list'];
  };
  '/admin/ad/update': {
    /**
     * admin/ad/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:ad*
     */
    post: operations['admin/ad/update'];
  };
  '/admin/announcements/create': {
    /**
     * admin/announcements/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
     */
    post: operations['admin/announcements/create'];
  };
  '/admin/announcements/delete': {
    /**
     * admin/announcements/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
     */
    post: operations['admin/announcements/delete'];
  };
  '/admin/announcements/list': {
    /**
     * admin/announcements/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:announcements*
     */
    post: operations['admin/announcements/list'];
  };
  '/admin/announcements/update': {
    /**
     * admin/announcements/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
     */
    post: operations['admin/announcements/update'];
  };
  '/admin/avatar-decorations/create': {
    /**
     * admin/avatar-decorations/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
     */
    post: operations['admin/avatar-decorations/create'];
  };
  '/admin/avatar-decorations/delete': {
    /**
     * admin/avatar-decorations/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
     */
    post: operations['admin/avatar-decorations/delete'];
  };
  '/admin/avatar-decorations/list': {
    /**
     * admin/avatar-decorations/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:avatar-decorations*
     */
    post: operations['admin/avatar-decorations/list'];
  };
  '/admin/avatar-decorations/update': {
    /**
     * admin/avatar-decorations/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
     */
    post: operations['admin/avatar-decorations/update'];
  };
  '/admin/delete-all-files-of-a-user': {
    /**
     * admin/delete-all-files-of-a-user
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:delete-all-files-of-a-user*
     */
    post: operations['admin/delete-all-files-of-a-user'];
  };
  '/admin/unset-user-avatar': {
    /**
     * admin/unset-user-avatar
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:unset-user-avatar*
     */
    post: operations['admin/unset-user-avatar'];
  };
  '/admin/unset-user-banner': {
    /**
     * admin/unset-user-banner
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:unset-user-banner*
     */
    post: operations['admin/unset-user-banner'];
  };
  '/admin/drive/clean-remote-files': {
    /**
     * admin/drive/clean-remote-files
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:drive*
     */
    post: operations['admin/drive/clean-remote-files'];
  };
  '/admin/drive/cleanup': {
    /**
     * admin/drive/cleanup
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:drive*
     */
    post: operations['admin/drive/cleanup'];
  };
  '/admin/drive/files': {
    /**
     * admin/drive/files
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:drive*
     */
    post: operations['admin/drive/files'];
  };
  '/admin/drive/show-file': {
    /**
     * admin/drive/show-file
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:drive*
     */
    post: operations['admin/drive/show-file'];
  };
  '/admin/emoji/add-aliases-bulk': {
    /**
     * admin/emoji/add-aliases-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/add-aliases-bulk'];
  };
  '/admin/emoji/add': {
    /**
     * admin/emoji/add
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/add'];
  };
  '/admin/emoji/copy': {
    /**
     * admin/emoji/copy
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/copy'];
  };
  '/admin/emoji/delete-bulk': {
    /**
     * admin/emoji/delete-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/delete-bulk'];
  };
  '/admin/emoji/delete': {
    /**
     * admin/emoji/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/delete'];
  };
  '/admin/emoji/import-zip': {
    /**
     * admin/emoji/import-zip
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['admin/emoji/import-zip'];
  };
  '/admin/emoji/list-remote': {
    /**
     * admin/emoji/list-remote
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
     */
    post: operations['admin/emoji/list-remote'];
  };
  '/admin/emoji/list': {
    /**
     * admin/emoji/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
     */
    post: operations['admin/emoji/list'];
  };
  '/admin/emoji/remove-aliases-bulk': {
    /**
     * admin/emoji/remove-aliases-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/remove-aliases-bulk'];
  };
  '/admin/emoji/set-aliases-bulk': {
    /**
     * admin/emoji/set-aliases-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/set-aliases-bulk'];
  };
  '/admin/emoji/set-category-bulk': {
    /**
     * admin/emoji/set-category-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/set-category-bulk'];
  };
  '/admin/emoji/set-license-bulk': {
    /**
     * admin/emoji/set-license-bulk
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/set-license-bulk'];
  };
  '/admin/emoji/update': {
    /**
     * admin/emoji/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
     */
    post: operations['admin/emoji/update'];
  };
  '/admin/federation/delete-all-files': {
    /**
     * admin/federation/delete-all-files
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
     */
    post: operations['admin/federation/delete-all-files'];
  };
  '/admin/federation/refresh-remote-instance-metadata': {
    /**
     * admin/federation/refresh-remote-instance-metadata
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
     */
    post: operations['admin/federation/refresh-remote-instance-metadata'];
  };
  '/admin/federation/remove-all-following': {
    /**
     * admin/federation/remove-all-following
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
     */
    post: operations['admin/federation/remove-all-following'];
  };
  '/admin/federation/update-instance': {
    /**
     * admin/federation/update-instance
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
     */
    post: operations['admin/federation/update-instance'];
  };
  '/admin/get-index-stats': {
    /**
     * admin/get-index-stats
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:index-stats*
     */
    post: operations['admin/get-index-stats'];
  };
  '/admin/get-table-stats': {
    /**
     * admin/get-table-stats
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:table-stats*
     */
    post: operations['admin/get-table-stats'];
  };
  '/admin/get-user-ips': {
    /**
     * admin/get-user-ips
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:user-ips*
     */
    post: operations['admin/get-user-ips'];
  };
  '/admin/invite/create': {
    /**
     * admin/invite/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:invite-codes*
     */
    post: operations['admin/invite/create'];
  };
  '/admin/invite/list': {
    /**
     * admin/invite/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:invite-codes*
     */
    post: operations['admin/invite/list'];
  };
  '/admin/promo/create': {
    /**
     * admin/promo/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:promo*
     */
    post: operations['admin/promo/create'];
  };
  '/admin/queue/clear': {
    /**
     * admin/queue/clear
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:queue*
     */
    post: operations['admin/queue/clear'];
  };
  '/admin/queue/deliver-delayed': {
    /**
     * admin/queue/deliver-delayed
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:queue*
     */
    post: operations['admin/queue/deliver-delayed'];
  };
  '/admin/queue/inbox-delayed': {
    /**
     * admin/queue/inbox-delayed
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:queue*
     */
    post: operations['admin/queue/inbox-delayed'];
  };
  '/admin/queue/promote': {
    /**
     * admin/queue/promote
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:queue*
     */
    post: operations['admin/queue/promote'];
  };
  '/admin/queue/stats': {
    /**
     * admin/queue/stats
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
     */
    post: operations['admin/queue/stats'];
  };
  '/admin/relays/add': {
    /**
     * admin/relays/add
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:relays*
     */
    post: operations['admin/relays/add'];
  };
  '/admin/relays/list': {
    /**
     * admin/relays/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:relays*
     */
    post: operations['admin/relays/list'];
  };
  '/admin/relays/remove': {
    /**
     * admin/relays/remove
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:relays*
     */
    post: operations['admin/relays/remove'];
  };
  '/admin/reset-password': {
    /**
     * admin/reset-password
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:reset-password*
     */
    post: operations['admin/reset-password'];
  };
  '/admin/resolve-abuse-user-report': {
    /**
     * admin/resolve-abuse-user-report
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:resolve-abuse-user-report*
     */
    post: operations['admin/resolve-abuse-user-report'];
  };
  '/admin/send-email': {
    /**
     * admin/send-email
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:send-email*
     */
    post: operations['admin/send-email'];
  };
  '/admin/server-info': {
    /**
     * admin/server-info
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:server-info*
     */
    post: operations['admin/server-info'];
  };
  '/admin/show-moderation-logs': {
    /**
     * admin/show-moderation-logs
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:show-moderation-log*
     */
    post: operations['admin/show-moderation-logs'];
  };
  '/admin/show-user': {
    /**
     * admin/show-user
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:show-user*
     */
    post: operations['admin/show-user'];
  };
  '/admin/show-users': {
    /**
     * admin/show-users
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:show-users*
     */
    post: operations['admin/show-users'];
  };
  '/admin/suspend-user': {
    /**
     * admin/suspend-user
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:suspend-user*
     */
    post: operations['admin/suspend-user'];
  };
  '/admin/unsuspend-user': {
    /**
     * admin/unsuspend-user
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:unsuspend-user*
     */
    post: operations['admin/unsuspend-user'];
  };
  '/admin/update-meta': {
    /**
     * admin/update-meta
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:meta*
     */
    post: operations['admin/update-meta'];
  };
  '/admin/delete-account': {
    /**
     * admin/delete-account
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:delete-account*
     */
    post: operations['admin/delete-account'];
  };
  '/admin/update-user-note': {
    /**
     * admin/update-user-note
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:user-note*
     */
    post: operations['admin/update-user-note'];
  };
  '/admin/roles/create': {
    /**
     * admin/roles/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
     */
    post: operations['admin/roles/create'];
  };
  '/admin/roles/delete': {
    /**
     * admin/roles/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
     */
    post: operations['admin/roles/delete'];
  };
  '/admin/roles/list': {
    /**
     * admin/roles/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:roles*
     */
    post: operations['admin/roles/list'];
  };
  '/admin/roles/show': {
    /**
     * admin/roles/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:admin:roles*
     */
    post: operations['admin/roles/show'];
  };
  '/admin/roles/update': {
    /**
     * admin/roles/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
     */
    post: operations['admin/roles/update'];
  };
  '/admin/roles/assign': {
    /**
     * admin/roles/assign
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
     */
    post: operations['admin/roles/assign'];
  };
  '/admin/roles/unassign': {
    /**
     * admin/roles/unassign
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
     */
    post: operations['admin/roles/unassign'];
  };
  '/admin/roles/update-default-policies': {
    /**
     * admin/roles/update-default-policies
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
     */
    post: operations['admin/roles/update-default-policies'];
  };
  '/admin/roles/users': {
    /**
     * admin/roles/users
     * @description No description provided.
     *
     * **Credential required**: *No* / **Permission**: *read:admin:roles*
     */
    post: operations['admin/roles/users'];
  };
  '/admin/subscription-plans/create': {
    /**
     * admin/subscription-plans/create
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes* / **Permission**: *write:admin:subscription-plans*
     */
    post: operations['admin/subscription-plans/create'];
  };
  '/admin/subscription-plans/update': {
    /**
     * admin/subscription-plans/update
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes* / **Permission**: *write:admin:subscription-plans*
     */
    post: operations['admin/subscription-plans/update'];
  };
  '/admin/subscription-plans/archive': {
    /**
     * admin/subscription-plans/archive
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes* / **Permission**: *write:admin:subscription-plans*
     */
    post: operations['admin/subscription-plans/archive'];
  };
  '/announcements': {
    /**
     * announcements
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['announcements'];
  };
  '/antennas/create': {
    /**
     * antennas/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['antennas/create'];
  };
  '/antennas/delete': {
    /**
     * antennas/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['antennas/delete'];
  };
  '/antennas/list': {
    /**
     * antennas/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['antennas/list'];
  };
  '/antennas/notes': {
    /**
     * antennas/notes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['antennas/notes'];
  };
  '/antennas/show': {
    /**
     * antennas/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['antennas/show'];
  };
  '/antennas/update': {
    /**
     * antennas/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['antennas/update'];
  };
  '/ap/get': {
    /**
     * ap/get
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:federation*
     */
    post: operations['ap/get'];
  };
  '/ap/show': {
    /**
     * ap/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['ap/show'];
  };
  '/app/create': {
    /**
     * app/create
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['app/create'];
  };
  '/app/show': {
    /**
     * app/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['app/show'];
  };
  '/auth/accept': {
    /**
     * auth/accept
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['auth/accept'];
  };
  '/auth/session/generate': {
    /**
     * auth/session/generate
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['auth/session/generate'];
  };
  '/auth/session/show': {
    /**
     * auth/session/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['auth/session/show'];
  };
  '/auth/session/userkey': {
    /**
     * auth/session/userkey
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['auth/session/userkey'];
  };
  '/blocking/create': {
    /**
     * blocking/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:blocks*
     */
    post: operations['blocking/create'];
  };
  '/blocking/delete': {
    /**
     * blocking/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:blocks*
     */
    post: operations['blocking/delete'];
  };
  '/blocking/list': {
    /**
     * blocking/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:blocks*
     */
    post: operations['blocking/list'];
  };
  '/channels/create': {
    /**
     * channels/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations['channels/create'];
  };
  '/channels/featured': {
    /**
     * channels/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['channels/featured'];
  };
  '/channels/follow': {
    /**
     * channels/follow
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations['channels/follow'];
  };
  '/channels/followed': {
    /**
     * channels/followed
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:channels*
     */
    post: operations['channels/followed'];
  };
  '/channels/owned': {
    /**
     * channels/owned
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:channels*
     */
    post: operations['channels/owned'];
  };
  '/channels/show': {
    /**
     * channels/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['channels/show'];
  };
  '/channels/timeline': {
    /**
     * channels/timeline
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['channels/timeline'];
  };
  '/channels/unfollow': {
    /**
     * channels/unfollow
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations['channels/unfollow'];
  };
  '/channels/update': {
    /**
     * channels/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations['channels/update'];
  };
  '/channels/favorite': {
    /**
     * channels/favorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations['channels/favorite'];
  };
  '/channels/unfavorite': {
    /**
     * channels/unfavorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:channels*
     */
    post: operations['channels/unfavorite'];
  };
  '/channels/my-favorites': {
    /**
     * channels/my-favorites
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:channels*
     */
    post: operations['channels/my-favorites'];
  };
  '/channels/search': {
    /**
     * channels/search
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['channels/search'];
  };
  '/charts/active-users': {
    /**
     * charts/active-users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/active-users'];
    /**
     * charts/active-users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/active-users'];
  };
  '/charts/ap-request': {
    /**
     * charts/ap-request
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/ap-request'];
    /**
     * charts/ap-request
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/ap-request'];
  };
  '/charts/drive': {
    /**
     * charts/drive
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/drive'];
    /**
     * charts/drive
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/drive'];
  };
  '/charts/federation': {
    /**
     * charts/federation
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/federation'];
    /**
     * charts/federation
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/federation'];
  };
  '/charts/instance': {
    /**
     * charts/instance
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/instance'];
    /**
     * charts/instance
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/instance'];
  };
  '/charts/notes': {
    /**
     * charts/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/notes'];
    /**
     * charts/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/notes'];
  };
  '/charts/user/drive': {
    /**
     * charts/user/drive
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/user/drive'];
    /**
     * charts/user/drive
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/user/drive'];
  };
  '/charts/user/following': {
    /**
     * charts/user/following
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/user/following'];
    /**
     * charts/user/following
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/user/following'];
  };
  '/charts/user/notes': {
    /**
     * charts/user/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/user/notes'];
    /**
     * charts/user/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/user/notes'];
  };
  '/charts/user/pv': {
    /**
     * charts/user/pv
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/user/pv'];
    /**
     * charts/user/pv
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/user/pv'];
  };
  '/charts/user/reactions': {
    /**
     * charts/user/reactions
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/user/reactions'];
    /**
     * charts/user/reactions
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/user/reactions'];
  };
  '/charts/users': {
    /**
     * charts/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['charts/users'];
    /**
     * charts/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['charts/users'];
  };
  '/clips/add-note': {
    /**
     * clips/add-note
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['clips/add-note'];
  };
  '/clips/remove-note': {
    /**
     * clips/remove-note
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['clips/remove-note'];
  };
  '/clips/create': {
    /**
     * clips/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['clips/create'];
  };
  '/clips/delete': {
    /**
     * clips/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['clips/delete'];
  };
  '/clips/list': {
    /**
     * clips/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['clips/list'];
  };
  '/clips/notes': {
    /**
     * clips/notes
     * @description No description provided.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations['clips/notes'];
  };
  '/clips/show': {
    /**
     * clips/show
     * @description No description provided.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations['clips/show'];
  };
  '/clips/update': {
    /**
     * clips/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['clips/update'];
  };
  '/clips/favorite': {
    /**
     * clips/favorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
     */
    post: operations['clips/favorite'];
  };
  '/clips/unfavorite': {
    /**
     * clips/unfavorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
     */
    post: operations['clips/unfavorite'];
  };
  '/clips/my-favorites': {
    /**
     * clips/my-favorites
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:clip-favorite*
     */
    post: operations['clips/my-favorites'];
  };
  '/drive': {
    /**
     * drive
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive'];
  };
  '/drive/files': {
    /**
     * drive/files
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/files'];
  };
  '/drive/files/attached-notes': {
    /**
     * drive/files/attached-notes
     * @description Find the notes to which the given file is attached.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/files/attached-notes'];
  };
  '/drive/files/check-existence': {
    /**
     * drive/files/check-existence
     * @description Check if a given file exists.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/files/check-existence'];
  };
  '/drive/files/create': {
    /**
     * drive/files/create
     * @description Upload a new drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations['drive/files/create'];
  };
  '/drive/files/delete': {
    /**
     * drive/files/delete
     * @description Delete an existing drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations['drive/files/delete'];
  };
  '/drive/files/find-by-hash': {
    /**
     * drive/files/find-by-hash
     * @description Search for a drive file by a hash of the contents.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/files/find-by-hash'];
  };
  '/drive/files/find': {
    /**
     * drive/files/find
     * @description Search for a drive file by the given parameters.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/files/find'];
  };
  '/drive/files/show': {
    /**
     * drive/files/show
     * @description Show the properties of a drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/files/show'];
  };
  '/drive/files/update': {
    /**
     * drive/files/update
     * @description Update the properties of a drive file.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations['drive/files/update'];
  };
  '/drive/folders': {
    /**
     * drive/folders
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/folders'];
  };
  '/drive/folders/create': {
    /**
     * drive/folders/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations['drive/folders/create'];
  };
  '/drive/folders/delete': {
    /**
     * drive/folders/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations['drive/folders/delete'];
  };
  '/drive/folders/find': {
    /**
     * drive/folders/find
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/folders/find'];
  };
  '/drive/folders/show': {
    /**
     * drive/folders/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/folders/show'];
  };
  '/drive/folders/update': {
    /**
     * drive/folders/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:drive*
     */
    post: operations['drive/folders/update'];
  };
  '/drive/stream': {
    /**
     * drive/stream
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:drive*
     */
    post: operations['drive/stream'];
  };
  '/email-address/available': {
    /**
     * email-address/available
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['email-address/available'];
  };
  '/endpoint': {
    /**
     * endpoint
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['endpoint'];
  };
  '/endpoints': {
    /**
     * endpoints
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['endpoints'];
  };
  '/export-custom-emojis': {
    /**
     * export-custom-emojis
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['export-custom-emojis'];
  };
  '/federation/followers': {
    /**
     * federation/followers
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/followers'];
  };
  '/federation/following': {
    /**
     * federation/following
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/following'];
  };
  '/federation/instances': {
    /**
     * federation/instances
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['federation/instances'];
    /**
     * federation/instances
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/instances'];
  };
  '/federation/show-instance': {
    /**
     * federation/show-instance
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/show-instance'];
  };
  '/federation/update-remote-user': {
    /**
     * federation/update-remote-user
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/update-remote-user'];
  };
  '/federation/users': {
    /**
     * federation/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/users'];
  };
  '/federation/stats': {
    /**
     * federation/stats
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['federation/stats'];
    /**
     * federation/stats
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['federation/stats'];
  };
  '/following/create': {
    /**
     * following/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/create'];
  };
  '/following/delete': {
    /**
     * following/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/delete'];
  };
  '/following/update': {
    /**
     * following/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/update'];
  };
  '/following/update-all': {
    /**
     * following/update-all
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/update-all'];
  };
  '/following/invalidate': {
    /**
     * following/invalidate
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/invalidate'];
  };
  '/following/requests/accept': {
    /**
     * following/requests/accept
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/requests/accept'];
  };
  '/following/requests/cancel': {
    /**
     * following/requests/cancel
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/requests/cancel'];
  };
  '/following/requests/list': {
    /**
     * following/requests/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:following*
     */
    post: operations['following/requests/list'];
  };
  '/following/requests/reject': {
    /**
     * following/requests/reject
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:following*
     */
    post: operations['following/requests/reject'];
  };
  '/gallery/featured': {
    /**
     * gallery/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['gallery/featured'];
  };
  '/gallery/popular': {
    /**
     * gallery/popular
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['gallery/popular'];
  };
  '/gallery/posts': {
    /**
     * gallery/posts
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['gallery/posts'];
  };
  '/gallery/posts/create': {
    /**
     * gallery/posts/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery*
     */
    post: operations['gallery/posts/create'];
  };
  '/gallery/posts/delete': {
    /**
     * gallery/posts/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery*
     */
    post: operations['gallery/posts/delete'];
  };
  '/gallery/posts/like': {
    /**
     * gallery/posts/like
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
     */
    post: operations['gallery/posts/like'];
  };
  '/gallery/posts/show': {
    /**
     * gallery/posts/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['gallery/posts/show'];
  };
  '/gallery/posts/unlike': {
    /**
     * gallery/posts/unlike
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
     */
    post: operations['gallery/posts/unlike'];
  };
  '/gallery/posts/update': {
    /**
     * gallery/posts/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:gallery*
     */
    post: operations['gallery/posts/update'];
  };
  '/get-online-users-count': {
    /**
     * get-online-users-count
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['get-online-users-count'];
    /**
     * get-online-users-count
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['get-online-users-count'];
  };
  '/get-avatar-decorations': {
    /**
     * get-avatar-decorations
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['get-avatar-decorations'];
  };
  '/hashtags/list': {
    /**
     * hashtags/list
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['hashtags/list'];
  };
  '/hashtags/search': {
    /**
     * hashtags/search
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['hashtags/search'];
  };
  '/hashtags/show': {
    /**
     * hashtags/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['hashtags/show'];
  };
  '/hashtags/trend': {
    /**
     * hashtags/trend
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['hashtags/trend'];
    /**
     * hashtags/trend
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['hashtags/trend'];
  };
  '/hashtags/users': {
    /**
     * hashtags/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['hashtags/users'];
  };
  '/i': {
    /**
     * i
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i'];
  };
  '/i/2fa/done': {
    /**
     * i/2fa/done
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/done'];
  };
  '/i/2fa/key-done': {
    /**
     * i/2fa/key-done
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/key-done'];
  };
  '/i/2fa/password-less': {
    /**
     * i/2fa/password-less
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/password-less'];
  };
  '/i/2fa/register-key': {
    /**
     * i/2fa/register-key
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/register-key'];
  };
  '/i/2fa/register': {
    /**
     * i/2fa/register
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/register'];
  };
  '/i/2fa/update-key': {
    /**
     * i/2fa/update-key
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/update-key'];
  };
  '/i/2fa/remove-key': {
    /**
     * i/2fa/remove-key
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/remove-key'];
  };
  '/i/2fa/unregister': {
    /**
     * i/2fa/unregister
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/2fa/unregister'];
  };
  '/i/apps': {
    /**
     * i/apps
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/apps'];
  };
  '/i/authorized-apps': {
    /**
     * i/authorized-apps
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/authorized-apps'];
  };
  '/i/claim-achievement': {
    /**
     * i/claim-achievement
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/claim-achievement'];
  };
  '/i/change-password': {
    /**
     * i/change-password
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/change-password'];
  };
  '/i/delete-account': {
    /**
     * i/delete-account
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/delete-account'];
  };
  '/i/export-blocking': {
    /**
     * i/export-blocking
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-blocking'];
  };
  '/i/export-following': {
    /**
     * i/export-following
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-following'];
  };
  '/i/export-mute': {
    /**
     * i/export-mute
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-mute'];
  };
  '/i/export-notes': {
    /**
     * i/export-notes
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-notes'];
  };
  '/i/export-clips': {
    /**
     * i/export-clips
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-clips'];
  };
  '/i/export-favorites': {
    /**
     * i/export-favorites
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-favorites'];
  };
  '/i/export-user-lists': {
    /**
     * i/export-user-lists
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-user-lists'];
  };
  '/i/export-antennas': {
    /**
     * i/export-antennas
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/export-antennas'];
  };
  '/i/favorites': {
    /**
     * i/favorites
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:favorites*
     */
    post: operations['i/favorites'];
  };
  '/i/gallery/likes': {
    /**
     * i/gallery/likes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:gallery-likes*
     */
    post: operations['i/gallery/likes'];
  };
  '/i/gallery/posts': {
    /**
     * i/gallery/posts
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:gallery*
     */
    post: operations['i/gallery/posts'];
  };
  '/i/import-blocking': {
    /**
     * i/import-blocking
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/import-blocking'];
  };
  '/i/import-following': {
    /**
     * i/import-following
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/import-following'];
  };
  '/i/import-muting': {
    /**
     * i/import-muting
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/import-muting'];
  };
  '/i/import-user-lists': {
    /**
     * i/import-user-lists
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/import-user-lists'];
  };
  '/i/import-antennas': {
    /**
     * i/import-antennas
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/import-antennas'];
  };
  '/i/notifications': {
    /**
     * i/notifications
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:notifications*
     */
    post: operations['i/notifications'];
  };
  '/i/notifications-grouped': {
    /**
     * i/notifications-grouped
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:notifications*
     */
    post: operations['i/notifications-grouped'];
  };
  '/i/page-likes': {
    /**
     * i/page-likes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:page-likes*
     */
    post: operations['i/page-likes'];
  };
  '/i/pages': {
    /**
     * i/pages
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:pages*
     */
    post: operations['i/pages'];
  };
  '/i/pin': {
    /**
     * i/pin
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/pin'];
  };
  '/i/read-all-unread-notes': {
    /**
     * i/read-all-unread-notes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/read-all-unread-notes'];
  };
  '/i/read-announcement': {
    /**
     * i/read-announcement
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/read-announcement'];
  };
  '/i/regenerate-token': {
    /**
     * i/regenerate-token
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/regenerate-token'];
  };
  '/i/registry/get-all': {
    /**
     * i/registry/get-all
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/registry/get-all'];
  };
  '/i/registry/get-detail': {
    /**
     * i/registry/get-detail
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/registry/get-detail'];
  };
  '/i/registry/get': {
    /**
     * i/registry/get
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/registry/get'];
  };
  '/i/registry/keys-with-type': {
    /**
     * i/registry/keys-with-type
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/registry/keys-with-type'];
  };
  '/i/registry/keys': {
    /**
     * i/registry/keys
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/registry/keys'];
  };
  '/i/registry/remove': {
    /**
     * i/registry/remove
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/registry/remove'];
  };
  '/i/registry/scopes-with-domain': {
    /**
     * i/registry/scopes-with-domain
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/registry/scopes-with-domain'];
  };
  '/i/registry/set': {
    /**
     * i/registry/set
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/registry/set'];
  };
  '/i/revoke-token': {
    /**
     * i/revoke-token
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/revoke-token'];
  };
  '/i/signin-history': {
    /**
     * i/signin-history
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/signin-history'];
  };
  '/i/unpin': {
    /**
     * i/unpin
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/unpin'];
  };
  '/i/update-email': {
    /**
     * i/update-email
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/update-email'];
  };
  '/i/update': {
    /**
     * i/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/update'];
  };
  '/i/move': {
    /**
     * i/move
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['i/move'];
  };
  '/i/webhooks/create': {
    /**
     * i/webhooks/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/webhooks/create'];
  };
  '/i/webhooks/list': {
    /**
     * i/webhooks/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/webhooks/list'];
  };
  '/i/webhooks/show': {
    /**
     * i/webhooks/show
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['i/webhooks/show'];
  };
  '/i/webhooks/update': {
    /**
     * i/webhooks/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/webhooks/update'];
  };
  '/i/webhooks/delete': {
    /**
     * i/webhooks/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['i/webhooks/delete'];
  };
  '/invite/create': {
    /**
     * invite/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:invite-codes*
     */
    post: operations['invite/create'];
  };
  '/invite/delete': {
    /**
     * invite/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:invite-codes*
     */
    post: operations['invite/delete'];
  };
  '/invite/list': {
    /**
     * invite/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:invite-codes*
     */
    post: operations['invite/list'];
  };
  '/invite/limit': {
    /**
     * invite/limit
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:invite-codes*
     */
    post: operations['invite/limit'];
  };
  '/meta': {
    /**
     * meta
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['meta'];
  };
  '/emojis': {
    /**
     * emojis
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['emojis'];
    /**
     * emojis
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['emojis'];
  };
  '/emoji': {
    /**
     * emoji
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['emoji'];
    /**
     * emoji
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['emoji'];
  };
  '/miauth/gen-token': {
    /**
     * miauth/gen-token
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['miauth/gen-token'];
  };
  '/mute/create': {
    /**
     * mute/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations['mute/create'];
  };
  '/mute/delete': {
    /**
     * mute/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations['mute/delete'];
  };
  '/mute/list': {
    /**
     * mute/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:mutes*
     */
    post: operations['mute/list'];
  };
  '/renote-mute/create': {
    /**
     * renote-mute/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations['renote-mute/create'];
  };
  '/renote-mute/delete': {
    /**
     * renote-mute/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:mutes*
     */
    post: operations['renote-mute/delete'];
  };
  '/renote-mute/list': {
    /**
     * renote-mute/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:mutes*
     */
    post: operations['renote-mute/list'];
  };
  '/my/apps': {
    /**
     * my/apps
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['my/apps'];
  };
  '/notes': {
    /**
     * notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes'];
  };
  '/notes/children': {
    /**
     * notes/children
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/children'];
  };
  '/notes/clips': {
    /**
     * notes/clips
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/clips'];
  };
  '/notes/conversation': {
    /**
     * notes/conversation
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/conversation'];
  };
  '/notes/create': {
    /**
     * notes/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notes*
     */
    post: operations['notes/create'];
  };
  '/notes/delete': {
    /**
     * notes/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notes*
     */
    post: operations['notes/delete'];
  };
  '/notes/favorites/create': {
    /**
     * notes/favorites/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:favorites*
     */
    post: operations['notes/favorites/create'];
  };
  '/notes/favorites/delete': {
    /**
     * notes/favorites/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:favorites*
     */
    post: operations['notes/favorites/delete'];
  };
  '/notes/featured': {
    /**
     * notes/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['notes/featured'];
    /**
     * notes/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/featured'];
  };
  '/notes/global-timeline': {
    /**
     * notes/global-timeline
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/global-timeline'];
  };
  '/notes/hybrid-timeline': {
    /**
     * notes/hybrid-timeline
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/hybrid-timeline'];
  };
  '/notes/local-timeline': {
    /**
     * notes/local-timeline
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/local-timeline'];
  };
  '/notes/mentions': {
    /**
     * notes/mentions
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/mentions'];
  };
  '/notes/polls/recommendation': {
    /**
     * notes/polls/recommendation
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/polls/recommendation'];
  };
  '/notes/polls/vote': {
    /**
     * notes/polls/vote
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:votes*
     */
    post: operations['notes/polls/vote'];
  };
  '/notes/reactions': {
    /**
     * notes/reactions
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['notes/reactions'];
    /**
     * notes/reactions
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/reactions'];
  };
  '/notes/reactions/create': {
    /**
     * notes/reactions/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:reactions*
     */
    post: operations['notes/reactions/create'];
  };
  '/notes/reactions/delete': {
    /**
     * notes/reactions/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:reactions*
     */
    post: operations['notes/reactions/delete'];
  };
  '/notes/renotes': {
    /**
     * notes/renotes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/renotes'];
  };
  '/notes/replies': {
    /**
     * notes/replies
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/replies'];
  };
  '/notes/search-by-tag': {
    /**
     * notes/search-by-tag
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/search-by-tag'];
  };
  '/notes/search': {
    /**
     * notes/search
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/search'];
  };
  '/notes/show': {
    /**
     * notes/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['notes/show'];
  };
  '/notes/state': {
    /**
     * notes/state
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/state'];
  };
  '/notes/thread-muting/create': {
    /**
     * notes/thread-muting/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['notes/thread-muting/create'];
  };
  '/notes/thread-muting/delete': {
    /**
     * notes/thread-muting/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['notes/thread-muting/delete'];
  };
  '/notes/timeline': {
    /**
     * notes/timeline
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/timeline'];
  };
  '/notes/translate': {
    /**
     * notes/translate
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/translate'];
  };
  '/notes/unrenote': {
    /**
     * notes/unrenote
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notes*
     */
    post: operations['notes/unrenote'];
  };
  '/notes/user-list-timeline': {
    /**
     * notes/user-list-timeline
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['notes/user-list-timeline'];
  };
  '/notifications/create': {
    /**
     * notifications/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notifications*
     */
    post: operations['notifications/create'];
  };
  '/notifications/mark-all-as-read': {
    /**
     * notifications/mark-all-as-read
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notifications*
     */
    post: operations['notifications/mark-all-as-read'];
  };
  '/notifications/test-notification': {
    /**
     * notifications/test-notification
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:notifications*
     */
    post: operations['notifications/test-notification'];
  };
  '/page-push': {
    /**
     * page-push
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['page-push'];
  };
  '/pages/create': {
    /**
     * pages/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:pages*
     */
    post: operations['pages/create'];
  };
  '/pages/delete': {
    /**
     * pages/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:pages*
     */
    post: operations['pages/delete'];
  };
  '/pages/featured': {
    /**
     * pages/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['pages/featured'];
  };
  '/pages/like': {
    /**
     * pages/like
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:page-likes*
     */
    post: operations['pages/like'];
  };
  '/pages/show': {
    /**
     * pages/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['pages/show'];
  };
  '/pages/unlike': {
    /**
     * pages/unlike
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:page-likes*
     */
    post: operations['pages/unlike'];
  };
  '/pages/update': {
    /**
     * pages/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:pages*
     */
    post: operations['pages/update'];
  };
  '/flash/create': {
    /**
     * flash/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash*
     */
    post: operations['flash/create'];
  };
  '/flash/delete': {
    /**
     * flash/delete
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash*
     */
    post: operations['flash/delete'];
  };
  '/flash/featured': {
    /**
     * flash/featured
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['flash/featured'];
  };
  '/flash/like': {
    /**
     * flash/like
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
     */
    post: operations['flash/like'];
  };
  '/flash/show': {
    /**
     * flash/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['flash/show'];
  };
  '/flash/unlike': {
    /**
     * flash/unlike
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
     */
    post: operations['flash/unlike'];
  };
  '/flash/update': {
    /**
     * flash/update
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:flash*
     */
    post: operations['flash/update'];
  };
  '/flash/my': {
    /**
     * flash/my
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:flash*
     */
    post: operations['flash/my'];
  };
  '/flash/my-likes': {
    /**
     * flash/my-likes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:flash-likes*
     */
    post: operations['flash/my-likes'];
  };
  '/ping': {
    /**
     * ping
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['ping'];
  };
  '/pinned-users': {
    /**
     * pinned-users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['pinned-users'];
  };
  '/promo/read': {
    /**
     * promo/read
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['promo/read'];
  };
  '/roles/list': {
    /**
     * roles/list
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['roles/list'];
  };
  '/roles/show': {
    /**
     * roles/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['roles/show'];
  };
  '/roles/users': {
    /**
     * roles/users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['roles/users'];
  };
  '/roles/notes': {
    /**
     * roles/notes
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['roles/notes'];
  };
  '/subscription/create': {
    /**
     * subscription/create
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['subscription/create'];
  };
  '/subscription/manage': {
    /**
     * subscription/manage
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['subscription/manage'];
  };
  '/subscription-plans/list': {
    /**
     * subscription-plans/list
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['subscription-plans/list'];
  };
  '/subscription-plans/show': {
    /**
     * subscription-plans/show
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['subscription-plans/show'];
  };
  '/request-reset-password': {
    /**
     * request-reset-password
     * @description Request a users password to be reset.
     *
     * **Credential required**: *No*
     */
    post: operations['request-reset-password'];
  };
  '/reset-db': {
    /**
     * reset-db
     * @description Only available when running with <code>NODE_ENV=testing</code>. Reset the database and flush Redis.
     *
     * **Credential required**: *No*
     */
    post: operations['reset-db'];
  };
  '/reset-password': {
    /**
     * reset-password
     * @description Complete the password reset that was previously requested.
     *
     * **Credential required**: *No*
     */
    post: operations['reset-password'];
  };
  '/server-info': {
    /**
     * server-info
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['server-info'];
    /**
     * server-info
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['server-info'];
  };
  '/stats': {
    /**
     * stats
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['stats'];
  };
  '/sw/show-registration': {
    /**
     * sw/show-registration
     * @description Check push notification registration exists.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['sw/show-registration'];
  };
  '/sw/update-registration': {
    /**
     * sw/update-registration
     * @description Update push notification registration.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['sw/update-registration'];
  };
  '/sw/register': {
    /**
     * sw/register
     * @description Register to receive push notifications.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['sw/register'];
  };
  '/sw/unregister': {
    /**
     * sw/unregister
     * @description Unregister from receiving push notifications.
     *
     * **Credential required**: *No*
     */
    post: operations['sw/unregister'];
  };
  '/test': {
    /**
     * test
     * @description Endpoint for testing input validation.
     *
     * **Credential required**: *No*
     */
    post: operations['test'];
  };
  '/username/available': {
    /**
     * username/available
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['username/available'];
  };
  '/users': {
    /**
     * users
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['users'];
  };
  '/users/clips': {
    /**
     * users/clips
     * @description Show all clips this user owns.
     *
     * **Credential required**: *No*
     */
    post: operations['users/clips'];
  };
  '/users/followers': {
    /**
     * users/followers
     * @description Show everyone that follows this user.
     *
     * **Credential required**: *No*
     */
    post: operations['users/followers'];
  };
  '/users/following': {
    /**
     * users/following
     * @description Show everyone that this user is following.
     *
     * **Credential required**: *No*
     */
    post: operations['users/following'];
  };
  '/users/gallery/posts': {
    /**
     * users/gallery/posts
     * @description Show all gallery posts by the given user.
     *
     * **Credential required**: *No*
     */
    post: operations['users/gallery/posts'];
  };
  '/users/get-frequently-replied-users': {
    /**
     * users/get-frequently-replied-users
     * @description Get a list of other users that the specified user frequently replies to.
     *
     * **Credential required**: *No*
     */
    post: operations['users/get-frequently-replied-users'];
  };
  '/users/featured-notes': {
    /**
     * users/featured-notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['users/featured-notes'];
    /**
     * users/featured-notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['users/featured-notes'];
  };
  '/users/lists/create': {
    /**
     * users/lists/create
     * @description Create a new list of users.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/create'];
  };
  '/users/lists/delete': {
    /**
     * users/lists/delete
     * @description Delete an existing list of users.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/delete'];
  };
  '/users/lists/list': {
    /**
     * users/lists/list
     * @description Show all lists that the authenticated user has created.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations['users/lists/list'];
  };
  '/users/lists/pull': {
    /**
     * users/lists/pull
     * @description Remove a user from a list.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/pull'];
  };
  '/users/lists/push': {
    /**
     * users/lists/push
     * @description Add a user to an existing list.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/push'];
  };
  '/users/lists/show': {
    /**
     * users/lists/show
     * @description Show the properties of a list.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations['users/lists/show'];
  };
  '/users/lists/favorite': {
    /**
     * users/lists/favorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/favorite'];
  };
  '/users/lists/unfavorite': {
    /**
     * users/lists/unfavorite
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/unfavorite'];
  };
  '/users/lists/update': {
    /**
     * users/lists/update
     * @description Update the properties of a list.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/update'];
  };
  '/users/lists/create-from-public': {
    /**
     * users/lists/create-from-public
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/create-from-public'];
  };
  '/users/lists/update-membership': {
    /**
     * users/lists/update-membership
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/lists/update-membership'];
  };
  '/users/lists/get-memberships': {
    /**
     * users/lists/get-memberships
     * @description No description provided.
     *
     * **Credential required**: *No* / **Permission**: *read:account*
     */
    post: operations['users/lists/get-memberships'];
  };
  '/users/notes': {
    /**
     * users/notes
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['users/notes'];
  };
  '/users/pages': {
    /**
     * users/pages
     * @description Show all pages this user created.
     *
     * **Credential required**: *No*
     */
    post: operations['users/pages'];
  };
  '/users/flashs': {
    /**
     * users/flashs
     * @description Show all flashs this user created.
     *
     * **Credential required**: *No*
     */
    post: operations['users/flashs'];
  };
  '/users/reactions': {
    /**
     * users/reactions
     * @description Show all reactions this user made.
     *
     * **Credential required**: *No*
     */
    post: operations['users/reactions'];
  };
  '/users/recommendation': {
    /**
     * users/recommendation
     * @description Show users that the authenticated user might be interested to follow.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['users/recommendation'];
  };
  '/users/relation': {
    /**
     * users/relation
     * @description Show the different kinds of relations between the authenticated user and the specified user(s).
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['users/relation'];
  };
  '/users/report-abuse': {
    /**
     * users/report-abuse
     * @description File a report.
     *
     * **Credential required**: *Yes* / **Permission**: *write:report-abuse*
     */
    post: operations['users/report-abuse'];
  };
  '/users/search-by-username-and-host': {
    /**
     * users/search-by-username-and-host
     * @description Search for a user by username and/or host.
     *
     * **Credential required**: *No*
     */
    post: operations['users/search-by-username-and-host'];
  };
  '/users/search': {
    /**
     * users/search
     * @description Search for users.
     *
     * **Credential required**: *No*
     */
    post: operations['users/search'];
  };
  '/users/show': {
    /**
     * users/show
     * @description Show the properties of a user.
     *
     * **Credential required**: *No*
     */
    post: operations['users/show'];
  };
  '/users/achievements': {
    /**
     * users/achievements
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['users/achievements'];
  };
  '/users/update-memo': {
    /**
     * users/update-memo
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['users/update-memo'];
  };
  '/fetch-rss': {
    /**
     * fetch-rss
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['fetch-rss'];
    /**
     * fetch-rss
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['fetch-rss'];
  };
  '/fetch-external-resources': {
    /**
     * fetch-external-resources
     * @description No description provided.
     *
     * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
     * **Credential required**: *Yes*
     */
    post: operations['fetch-external-resources'];
  };
  '/retention': {
    /**
     * retention
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['retention'];
    /**
     * retention
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['retention'];
  };
  '/bubble-game/register': {
    /**
     * bubble-game/register
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['bubble-game/register'];
  };
  '/bubble-game/ranking': {
    /**
     * bubble-game/ranking
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    get: operations['bubble-game/ranking'];
    /**
     * bubble-game/ranking
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['bubble-game/ranking'];
  };
  '/reversi/cancel-match': {
    /**
     * reversi/cancel-match
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['reversi/cancel-match'];
  };
  '/reversi/games': {
    /**
     * reversi/games
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['reversi/games'];
  };
  '/reversi/match': {
    /**
     * reversi/match
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['reversi/match'];
  };
  '/reversi/invitations': {
    /**
     * reversi/invitations
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *read:account*
     */
    post: operations['reversi/invitations'];
  };
  '/reversi/show-game': {
    /**
     * reversi/show-game
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['reversi/show-game'];
  };
  '/reversi/surrender': {
    /**
     * reversi/surrender
     * @description No description provided.
     *
     * **Credential required**: *Yes* / **Permission**: *write:account*
     */
    post: operations['reversi/surrender'];
  };
  '/reversi/verify': {
    /**
     * reversi/verify
     * @description No description provided.
     *
     * **Credential required**: *No*
     */
    post: operations['reversi/verify'];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    Error: {
      /** @description An error object. */
      error: {
        /** @description An error code. Unique within the endpoint. */
        code: string;
        /** @description An error message. */
        message: string;
        /**
         * Format: uuid
         * @description An error ID. This ID is static.
         */
        id: string;
      };
    };
    UserLite: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** @example 藍 */
      name: string | null;
      /** @example ai */
      username: string;
      /**
       * @description The local host is represented with `null`.
       * @example misskey.example.com
       */
      host: string | null;
      /** Format: url */
      avatarUrl: string | null;
      avatarBlurhash: string | null;
      avatarDecorations: {
          /** Format: id */
          id: string;
          angle?: number;
          flipH?: boolean;
          /** Format: url */
          url: string;
          offsetX?: number;
          offsetY?: number;
        }[];
      isBot?: boolean;
      isCat?: boolean;
      instance?: {
        name: string | null;
        softwareName: string | null;
        softwareVersion: string | null;
        iconUrl: string | null;
        faviconUrl: string | null;
        themeColor: string | null;
      };
      emojis: Record<string, never>;
      /** @enum {string} */
      onlineStatus: 'unknown' | 'online' | 'active' | 'offline';
      badgeRoles?: ({
          name: string;
          iconUrl: string | null;
          displayOrder: number;
        })[];
    };
    UserDetailedNotMeOnly: {
      /** Format: url */
      url: string | null;
      /** Format: uri */
      uri: string | null;
      /** Format: uri */
      movedTo: string | null;
      alsoKnownAs: string[] | null;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      /** Format: date-time */
      lastFetchedAt: string | null;
      /** Format: url */
      bannerUrl: string | null;
      bannerBlurhash: string | null;
      isLocked: boolean;
      isSilenced: boolean;
      /** @example false */
      isSuspended: boolean;
      /** @example Hi masters, I am Ai! */
      description: string | null;
      location: string | null;
      /** @example 2018-03-12 */
      birthday: string | null;
      /** @example ja-JP */
      lang: string | null;
      fields: {
          name: string;
          value: string;
        }[];
      verifiedLinks: string[];
      followersCount: number;
      followingCount: number;
      notesCount: number;
      pinnedNoteIds: string[];
      pinnedNotes: components['schemas']['Note'][];
      pinnedPageId: string | null;
      pinnedPage: components['schemas']['Page'] | null;
      publicReactions: boolean;
      /** @enum {string} */
      followingVisibility: 'public' | 'followers' | 'private';
      /** @enum {string} */
      followersVisibility: 'public' | 'followers' | 'private';
      /** @default false */
      twoFactorEnabled: boolean;
      /** @default false */
      usePasswordLessLogin: boolean;
      /** @default false */
      securityKeys: boolean;
      roles: components['schemas']['RoleLite'][];
      memo: string | null;
      moderationNote?: string;
      isFollowing?: boolean;
      isFollowed?: boolean;
      hasPendingFollowRequestFromYou?: boolean;
      hasPendingFollowRequestToYou?: boolean;
      isBlocking?: boolean;
      isBlocked?: boolean;
      isMuted?: boolean;
      isRenoteMuted?: boolean;
      /** @enum {string} */
      notify?: 'normal' | 'none';
      withReplies?: boolean;
    };
    MeDetailedOnly: {
      /** Format: id */
      avatarId: string | null;
      /** Format: id */
      bannerId: string | null;
      isModerator: boolean | null;
      isAdmin: boolean | null;
      injectFeaturedNote: boolean;
      receiveAnnouncementEmail: boolean;
      alwaysMarkNsfw: boolean;
      autoSensitive: boolean;
      carefulBot: boolean;
      autoAcceptFollowed: boolean;
      noCrawle: boolean;
      preventAiLearning: boolean;
      isExplorable: boolean;
      isDeleted: boolean;
      /** @enum {string} */
      subscriptionStatus: 'incomplete' | 'incomplete_expired' | 'trialing' | 'active' | 'past_due' | 'paused' | 'canceled' | 'unpaid' | 'none';
      /** Format: id */
      subscriptionPlanId: string | null;
      /** @enum {string} */
      twoFactorBackupCodesStock: 'full' | 'partial' | 'none';
      hideOnlineStatus: boolean;
      hasUnreadSpecifiedNotes: boolean;
      hasUnreadMentions: boolean;
      hasUnreadAnnouncement: boolean;
      unreadAnnouncements: components['schemas']['Announcement'][];
      hasUnreadAntenna: boolean;
      hasUnreadChannel: boolean;
      hasUnreadNotification: boolean;
      hasPendingReceivedFollowRequest: boolean;
      unreadNotificationsCount: number;
      mutedWords: string[][];
      mutedInstances: string[] | null;
      notificationRecieveConfig: {
        note?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        follow?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        mention?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        reply?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        renote?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        quote?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        reaction?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        pollEnded?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        receiveFollowRequest?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        followRequestAccepted?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        roleAssigned?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        achievementEarned?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        app?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
        test?: OneOf<[{
          /** @enum {string} */
          type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
        }, {
          /** @enum {string} */
          type: 'list';
          /** Format: misskey:id */
          userListId: string;
        }]>;
      };
      emailNotificationTypes: string[];
      achievements: {
          name: string;
          unlockedAt: number;
        }[];
      loggedInDays: number;
      policies: components['schemas']['RolePolicies'];
      email?: string | null;
      emailVerified?: boolean | null;
      securityKeysList?: {
          /**
           * Format: id
           * @example xxxxxxxxxx
           */
          id: string;
          name: string;
          /** Format: date-time */
          lastUsed: string;
        }[];
      stripeCustomerId?: string | null;
      stripeSubscriptionId: string | null;
    };
    UserDetailedNotMe: components['schemas']['UserLite'] & components['schemas']['UserDetailedNotMeOnly'];
    MeDetailed: components['schemas']['UserLite'] & components['schemas']['UserDetailedNotMeOnly'] & components['schemas']['MeDetailedOnly'];
    UserDetailed: components['schemas']['UserDetailedNotMe'] | components['schemas']['MeDetailed'];
    User: components['schemas']['UserLite'] | components['schemas']['UserDetailed'];
    UserList: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      name: string;
      userIds?: string[];
      isPublic: boolean;
    };
    Ad: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      expiresAt: string;
      /** Format: date-time */
      startsAt: string;
      place: string;
      priority: string;
      ratio: number;
      url: string;
      imageUrl: string;
      memo: string;
      dayOfWeek: number;
    };
    Announcement: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string | null;
      text: string;
      title: string;
      imageUrl: string | null;
      /** @enum {string} */
      icon: 'info' | 'warning' | 'error' | 'success';
      /** @enum {string} */
      display: 'dialog' | 'normal' | 'banner';
      needConfirmationToRead: boolean;
      silence: boolean;
      forYou: boolean;
      isRead?: boolean;
    };
    App: {
      id: string;
      name: string;
      callbackUrl: string | null;
      permission: string[];
      secret?: string;
      isAuthorized?: boolean;
    };
    Note: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      deletedAt?: string | null;
      text: string | null;
      cw?: string | null;
      /** Format: id */
      userId: string;
      user: components['schemas']['UserLite'];
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      replyId?: string | null;
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      renoteId?: string | null;
      reply?: components['schemas']['Note'] | null;
      renote?: components['schemas']['Note'] | null;
      isHidden?: boolean;
      /** @enum {string} */
      visibility: 'public' | 'home' | 'followers' | 'specified';
      mentions?: string[];
      visibleUserIds?: string[];
      fileIds?: string[];
      files?: components['schemas']['DriveFile'][];
      tags?: string[];
      poll?: ({
        /** Format: date-time */
        expiresAt?: string | null;
        multiple: boolean;
        choices: {
            isVoted: boolean;
            text: string;
            votes: number;
          }[];
      }) | null;
      emojis?: {
        [key: string]: string;
      };
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      channelId?: string | null;
      channel?: ({
        id: string;
        name: string;
        color: string;
        isSensitive: boolean;
        allowRenoteToExternal: boolean;
        userId: string | null;
      }) | null;
      localOnly?: boolean;
      reactionAcceptance: string | null;
      reactionEmojis: {
        [key: string]: string;
      };
      reactions: {
        [key: string]: number;
      };
      renoteCount: number;
      repliesCount: number;
      uri?: string;
      url?: string;
      reactionAndUserPairCache?: string[];
      clippedCount?: number;
      myReaction?: string | null;
    };
    NoteReaction: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      user: components['schemas']['UserLite'];
      type: string;
    };
    NoteFavorite: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      note: components['schemas']['Note'];
      /** Format: id */
      noteId: string;
    };
    Notification: {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'note';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'mention';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'reply';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'renote';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'quote';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'reaction';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
      reaction: string;
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'pollEnded';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
      note: components['schemas']['Note'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'follow';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'receiveFollowRequest';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'followRequestAccepted';
      user: components['schemas']['UserLite'];
      /** Format: id */
      userId: string;
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'roleAssigned';
      role: components['schemas']['Role'];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'achievementEarned';
      achievement: string;
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'app';
      body: string;
      header: string;
      icon: string;
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'reaction:grouped';
      note: components['schemas']['Note'];
      reactions: {
          user: components['schemas']['UserLite'];
          reaction: string;
        }[];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'renote:grouped';
      note: components['schemas']['Note'];
      users: components['schemas']['UserLite'][];
    } | {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @enum {string} */
      type: 'test';
    };
    DriveFile: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** @example lenna.jpg */
      name: string;
      /** @example image/jpeg */
      type: string;
      /**
       * Format: md5
       * @example 15eca7fba0480996e2245f5185bf39f2
       */
      md5: string;
      /** @example 51469 */
      size: number;
      isSensitive: boolean;
      blurhash: string | null;
      properties: {
        /** @example 1280 */
        width?: number;
        /** @example 720 */
        height?: number;
        /** @example 8 */
        orientation?: number;
        /** @example rgb(40,65,87) */
        avgColor?: string;
      };
      /** Format: url */
      url: string;
      /** Format: url */
      thumbnailUrl: string | null;
      comment: string | null;
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      folderId: string | null;
      folder?: components['schemas']['DriveFolder'] | null;
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      userId: string | null;
      user?: components['schemas']['UserLite'] | null;
    };
    DriveFolder: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      name: string;
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      parentId: string | null;
      foldersCount?: number;
      filesCount?: number;
      parent?: components['schemas']['DriveFolder'] | null;
    };
    Following: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: id */
      followeeId: string;
      /** Format: id */
      followerId: string;
      followee?: components['schemas']['UserDetailedNotMe'];
      follower?: components['schemas']['UserDetailedNotMe'];
    };
    Muting: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      expiresAt: string | null;
      /** Format: id */
      muteeId: string;
      mutee: components['schemas']['UserDetailedNotMe'];
    };
    RenoteMuting: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: id */
      muteeId: string;
      mutee: components['schemas']['UserDetailedNotMe'];
    };
    Blocking: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: id */
      blockeeId: string;
      blockee: components['schemas']['UserDetailedNotMe'];
    };
    Hashtag: {
      /** @example misskey */
      tag: string;
      mentionedUsersCount: number;
      mentionedLocalUsersCount: number;
      mentionedRemoteUsersCount: number;
      attachedUsersCount: number;
      attachedLocalUsersCount: number;
      attachedRemoteUsersCount: number;
    };
    InviteCode: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** @example GR6S02ERUA5VR */
      code: string;
      /** Format: date-time */
      expiresAt: string | null;
      /** Format: date-time */
      createdAt: string;
      createdBy: components['schemas']['UserLite'] | null;
      usedBy: components['schemas']['UserLite'] | null;
      /** Format: date-time */
      usedAt: string | null;
      used: boolean;
    };
    Page: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: id */
      userId: string;
      user: components['schemas']['UserLite'];
      content: components['schemas']['PageBlock'][];
      variables: Record<string, never>[];
      title: string;
      name: string;
      summary: string | null;
      hideTitleWhenPinned: boolean;
      alignCenter: boolean;
      font: string;
      script: string;
      eyeCatchingImageId: string | null;
      eyeCatchingImage: components['schemas']['DriveFile'] | null;
      attachedFiles: components['schemas']['DriveFile'][];
      likedCount: number;
      isLiked?: boolean;
    };
    PageBlock: OneOf<[{
      id: string;
      /** @enum {string} */
      type: 'text';
      text: string;
    }, {
      id: string;
      /** @enum {string} */
      type: 'section';
      title: string;
      children: components['schemas']['PageBlock'][];
    }, {
      id: string;
      /** @enum {string} */
      type: 'image';
      fileId: string | null;
    }, {
      id: string;
      /** @enum {string} */
      type: 'note';
      detailed: boolean;
      note: string | null;
    }]>;
    Channel: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      lastNotedAt: string | null;
      name: string;
      description: string | null;
      /** Format: id */
      userId: string | null;
      /** Format: url */
      bannerUrl: string | null;
      pinnedNoteIds: string[];
      color: string;
      isArchived: boolean;
      usersCount: number;
      notesCount: number;
      isSensitive: boolean;
      allowRenoteToExternal: boolean;
      isFollowing?: boolean;
      isFavorited?: boolean;
      pinnedNotes?: components['schemas']['Note'][];
    };
    QueueCount: {
      waiting: number;
      active: number;
      completed: number;
      failed: number;
      delayed: number;
    };
    Antenna: {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      name: string;
      keywords: string[][];
      excludeKeywords: string[][];
      /** @enum {string} */
      src: 'home' | 'all' | 'users' | 'list' | 'users_blacklist';
      /** Format: id */
      userListId: string | null;
      users: string[];
      /** @default false */
      caseSensitive: boolean;
      /** @default false */
      localOnly: boolean;
      notify: boolean;
      /** @default false */
      withReplies: boolean;
      withFile: boolean;
      isActive: boolean;
      /** @default false */
      hasUnreadNote: boolean;
    };
    Clip: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      lastClippedAt: string | null;
      /** Format: id */
      userId: string;
      user: components['schemas']['UserLite'];
      name: string;
      description: string | null;
      isPublic: boolean;
      favoritedCount: number;
      isFavorited?: boolean;
    };
    FederationInstance: {
      /** Format: id */
      id: string;
      /** Format: date-time */
      firstRetrievedAt: string;
      /** @example misskey.example.com */
      host: string;
      usersCount: number;
      notesCount: number;
      followingCount: number;
      followersCount: number;
      isNotResponding: boolean;
      isSuspended: boolean;
      isBlocked: boolean;
      /** @example misskey */
      softwareName: string | null;
      softwareVersion: string | null;
      /** @example true */
      openRegistrations: boolean | null;
      name: string | null;
      description: string | null;
      maintainerName: string | null;
      maintainerEmail: string | null;
      isSilenced: boolean;
      /** Format: url */
      iconUrl: string | null;
      /** Format: url */
      faviconUrl: string | null;
      themeColor: string | null;
      /** Format: date-time */
      infoUpdatedAt: string | null;
      /** Format: date-time */
      latestRequestReceivedAt: string | null;
    };
    GalleryPost: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: id */
      userId: string;
      user: components['schemas']['UserLite'];
      title: string;
      description: string | null;
      fileIds?: string[];
      files?: components['schemas']['DriveFile'][];
      tags?: string[];
      isSensitive: boolean;
      likedCount: number;
      isLiked?: boolean;
    };
    EmojiSimple: {
      aliases: string[];
      name: string;
      category: string | null;
      url: string;
      localOnly?: boolean;
      isSensitive?: boolean;
      roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
    };
    EmojiDetailed: {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string | null;
      aliases: string[];
      name: string;
      category: string | null;
      /** @description The local host is represented with `null`. */
      host: string | null;
      url: string;
      license: string | null;
      isSensitive: boolean;
      localOnly: boolean;
      requestedBy?: string | null;
      memo?: string | null;
      roleIdsThatCanBeUsedThisEmojiAsReaction: string[];
    };
    Flash: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: id */
      userId: string;
      user: components['schemas']['UserLite'];
      title: string;
      summary: string;
      script: string;
      likedCount: number | null;
      isLiked?: boolean;
    };
    Signin: {
      id: string;
      /** Format: date-time */
      createdAt: string;
      ip: string;
      headers: Record<string, never>;
      success: boolean;
    };
    SubscriptionPlan: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** @example New Plan */
      name: string;
      /** @example 1000 */
      price: number;
      /** @example usd */
      currency: string;
      /** @example New Plan */
      description: string | null;
      /** @example price_xxxxxxxxxx */
      stripePriceId: string;
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      roleId: string;
      role: components['schemas']['RoleLite'];
      /** @example false */
      isArchived: boolean;
    };
    RoleCondFormulaLogics: {
      id: string;
      /** @enum {string} */
      type: 'and' | 'or';
      values: components['schemas']['RoleCondFormulaValue'][];
    };
    RoleCondFormulaValueNot: {
      id: string;
      /** @enum {string} */
      type: 'not';
      value: components['schemas']['RoleCondFormulaValue'];
    };
    RoleCondFormulaValueIsLocalOrRemote: {
      id: string;
      /** @enum {string} */
      type: 'isLocal' | 'isRemote';
    };
    RoleCondFormulaValueCreated: {
      id: string;
      /** @enum {string} */
      type: 'createdLessThan' | 'createdMoreThan';
      sec: number;
    };
    RoleCondFormulaFollowersOrFollowingOrNotes: {
      id: string;
      /** @enum {string} */
      type: 'followersLessThanOrEq' | 'followersMoreThanOrEq' | 'followingLessThanOrEq' | 'followingMoreThanOrEq' | 'notesLessThanOrEq' | 'notesMoreThanOrEq';
      value: number;
    };
    RoleCondFormulaValue: components['schemas']['RoleCondFormulaLogics'] | components['schemas']['RoleCondFormulaValueNot'] | components['schemas']['RoleCondFormulaValueIsLocalOrRemote'] | components['schemas']['RoleCondFormulaValueCreated'] | components['schemas']['RoleCondFormulaFollowersOrFollowingOrNotes'];
    RoleLite: {
      /**
       * Format: id
       * @example xxxxxxxxxx
       */
      id: string;
      /** @example New Role */
      name: string;
      /** @example #000000 */
      color: string | null;
      iconUrl: string | null;
      description: string;
      /** @example false */
      isModerator: boolean;
      /** @example false */
      isAdministrator: boolean;
      /** @example 0 */
      displayOrder: number;
    };
    Role: components['schemas']['RoleLite'] & ({
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** @enum {string} */
      target: 'manual' | 'conditional';
      condFormula: components['schemas']['RoleCondFormulaValue'];
      /** @example false */
      isPublic: boolean;
      /** @example false */
      isExplorable: boolean;
      /** @example false */
      asBadge: boolean;
      /** @example false */
      canEditMembersByModerator: boolean;
      policies: {
        [key: string]: {
          value?: number | boolean;
          priority?: number;
          useDefault?: boolean;
        };
      };
      usersCount: number;
    });
    RolePolicies: {
      gtlAvailable: boolean;
      ltlAvailable: boolean;
      canPublicNote: boolean;
      canInvite: boolean;
      inviteLimit: number;
      inviteLimitCycle: number;
      inviteExpirationTime: number;
      canManageCustomEmojis: boolean;
      canManageAvatarDecorations: boolean;
      canSearchNotes: boolean;
      canUseTranslator: boolean;
      canHideAds: boolean;
      driveCapacityMb: number;
      alwaysMarkNsfw: boolean;
      pinLimit: number;
      antennaLimit: number;
      wordMuteLimit: number;
      webhookLimit: number;
      clipLimit: number;
      noteEachClipsLimit: number;
      userListLimit: number;
      userEachUserListsLimit: number;
      rateLimitFactor: number;
      avatarDecorationLimit: number;
    };
    ReversiGameLite: {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      startedAt: string | null;
      /** Format: date-time */
      endedAt: string | null;
      isStarted: boolean;
      isEnded: boolean;
      /** Format: id */
      user1Id: string;
      /** Format: id */
      user2Id: string;
      user1: components['schemas']['UserLite'];
      user2: components['schemas']['UserLite'];
      /** Format: id */
      winnerId: string | null;
      winner: components['schemas']['UserLite'] | null;
      /** Format: id */
      surrenderedUserId: string | null;
      /** Format: id */
      timeoutUserId: string | null;
      black: number | null;
      bw: string;
      noIrregularRules: boolean;
      isLlotheo: boolean;
      canPutEverywhere: boolean;
      loopedBoard: boolean;
      timeLimitForEachTurn: number;
    };
    ReversiGameDetailed: {
      /** Format: id */
      id: string;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      startedAt: string | null;
      /** Format: date-time */
      endedAt: string | null;
      isStarted: boolean;
      isEnded: boolean;
      form1: Record<string, never> | null;
      form2: Record<string, never> | null;
      user1Ready: boolean;
      user2Ready: boolean;
      /** Format: id */
      user1Id: string;
      /** Format: id */
      user2Id: string;
      user1: components['schemas']['UserLite'];
      user2: components['schemas']['UserLite'];
      /** Format: id */
      winnerId: string | null;
      winner: components['schemas']['UserLite'] | null;
      /** Format: id */
      surrenderedUserId: string | null;
      /** Format: id */
      timeoutUserId: string | null;
      black: number | null;
      bw: string;
      noIrregularRules: boolean;
      isLlotheo: boolean;
      canPutEverywhere: boolean;
      loopedBoard: boolean;
      timeLimitForEachTurn: number;
      logs: number[][];
      map: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * admin/meta
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:meta*
   */
  'admin/meta': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            cacheRemoteFiles: boolean;
            cacheRemoteSensitiveFiles: boolean;
            emailRequiredForSignup: boolean;
            enableHcaptcha: boolean;
            hcaptchaSiteKey: string | null;
            enableMcaptcha: boolean;
            mcaptchaSiteKey: string | null;
            mcaptchaInstanceUrl: string | null;
            enableRecaptcha: boolean;
            recaptchaSiteKey: string | null;
            enableTurnstile: boolean;
            turnstileSiteKey: string | null;
            swPublickey: string | null;
            /** @default /assets/ai.png */
            mascotImageUrl: string | null;
            bannerUrl: string | null;
            serverErrorImageUrl: string | null;
            infoImageUrl: string | null;
            notFoundImageUrl: string | null;
            iconUrl: string | null;
            app192IconUrl: string | null;
            app512IconUrl: string | null;
            enableEmail: boolean;
            enableServiceWorker: boolean;
            translatorAvailable: boolean;
            silencedHosts?: string[];
            pinnedUsers: string[];
            hiddenTags: string[];
            blockedHosts: string[];
            allowedHosts?: string[];
            enableAllowedHostsInWhiteList: boolean;
            sensitiveWords: string[];
            prohibitedWords: string[];
            bannedEmailDomains?: string[];
            preservedUsernames: string[];
            hcaptchaSecretKey: string | null;
            mcaptchaSecretKey: string | null;
            recaptchaSecretKey: string | null;
            turnstileSecretKey: string | null;
            sensitiveMediaDetection: string;
            sensitiveMediaDetectionSensitivity: string;
            setSensitiveFlagAutomatically: boolean;
            enableSensitiveMediaDetectionForVideos: boolean;
            /** Format: id */
            proxyAccountId: string | null;
            email: string | null;
            smtpSecure: boolean;
            smtpHost: string | null;
            smtpPort: number | null;
            smtpUser: string | null;
            smtpPass: string | null;
            swPrivateKey: string | null;
            useObjectStorage: boolean;
            objectStorageBaseUrl: string | null;
            objectStorageBucket: string | null;
            objectStoragePrefix: string | null;
            objectStorageEndpoint: string | null;
            objectStorageRegion: string | null;
            objectStoragePort: number | null;
            objectStorageAccessKey: string | null;
            objectStorageSecretKey: string | null;
            objectStorageUseSSL: boolean;
            objectStorageUseProxy: boolean;
            objectStorageSetPublicRead: boolean;
            enableIpLogging: boolean;
            enableActiveEmailValidation: boolean;
            enableVerifymailApi: boolean;
            verifymailAuthKey: string | null;
            enableTruemailApi: boolean;
            truemailInstance: string | null;
            truemailAuthKey: string | null;
            enableChartsForRemoteUser: boolean;
            enableChartsForFederatedInstances: boolean;
            enableServerMachineStats: boolean;
            enableIdenticonGeneration: boolean;
            manifestJsonOverride: string;
            policies: Record<string, never>;
            enableFanoutTimeline: boolean;
            enableFanoutTimelineDbFallback: boolean;
            perLocalUserUserTimelineCacheMax: number;
            perRemoteUserUserTimelineCacheMax: number;
            perUserHomeTimelineCacheMax: number;
            perUserListTimelineCacheMax: number;
            notesPerOneAd: number;
            backgroundImageUrl: string | null;
            deeplAuthKey: string | null;
            deeplIsPro: boolean;
            defaultDarkTheme: string | null;
            defaultLightTheme: string | null;
            description: string | null;
            disableRegistration: boolean;
            impressumUrl: string | null;
            maintainerEmail: string | null;
            maintainerName: string | null;
            name: string | null;
            shortName: string | null;
            objectStorageS3ForcePathStyle: boolean;
            privacyPolicyUrl: string | null;
            repositoryUrl: string | null;
            summalyProxy: string | null;
            themeColor: string | null;
            tosUrl: string | null;
            commerceDisclosureUrl: string | null;
            uri: string;
            version: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/abuse-user-reports
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:abuse-user-reports*
   */
  'admin/abuse-user-reports': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default null */
          state?: string | null;
          /**
           * @default combined
           * @enum {string}
           */
          reporterOrigin?: 'combined' | 'local' | 'remote';
          /**
           * @default combined
           * @enum {string}
           */
          targetUserOrigin?: 'combined' | 'local' | 'remote';
          /** @default false */
          forwarded?: boolean;
          /** @default null */
          category?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /**
               * Format: id
               * @example xxxxxxxxxx
               */
              id: string;
              /** Format: date-time */
              createdAt: string;
              comment: string;
              /** @example false */
              resolved: boolean;
              /** Format: id */
              reporterId: string;
              /** Format: id */
              targetUserId: string;
              /** Format: id */
              assigneeId: string | null;
              reporter: components['schemas']['UserDetailedNotMe'];
              targetUser: components['schemas']['UserDetailedNotMe'];
              assignee?: components['schemas']['UserDetailedNotMe'] | null;
              category: string;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/accounts/create
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'admin/accounts/create': {
    requestBody: {
      content: {
        'application/json': {
          username: string;
          password: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['MeDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/accounts/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:account*
   */
  'admin/accounts/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/accounts/find-by-email
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:account*
   */
  'admin/accounts/find-by-email': {
    requestBody: {
      content: {
        'application/json': {
          email: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailedNotMe'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/ad/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:ad*
   */
  'admin/ad/create': {
    requestBody: {
      content: {
        'application/json': {
          url: string;
          memo: string;
          place: string;
          priority: string;
          ratio: number;
          expiresAt: number;
          startsAt: number;
          imageUrl: string;
          dayOfWeek: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Ad'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/ad/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:ad*
   */
  'admin/ad/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/ad/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:ad*
   */
  'admin/ad/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default null */
          publishing?: boolean | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Ad'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/ad/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:ad*
   */
  'admin/ad/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
          memo: string;
          url: string;
          imageUrl: string;
          place: string;
          priority: string;
          ratio: number;
          expiresAt: number;
          startsAt: number;
          dayOfWeek: number;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/announcements/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
   */
  'admin/announcements/create': {
    requestBody: {
      content: {
        'application/json': {
          title: string;
          text: string;
          imageUrl: string | null;
          /**
           * @default info
           * @enum {string}
           */
          icon?: 'info' | 'warning' | 'error' | 'success';
          /**
           * @default normal
           * @enum {string}
           */
          display?: 'normal' | 'banner' | 'dialog';
          /** @default false */
          forExistingUsers?: boolean;
          /** @default false */
          silence?: boolean;
          /** @default false */
          needConfirmationToRead?: boolean;
          /** @default 0 */
          closeDuration?: number;
          /** @default 0 */
          displayOrder?: number;
          /**
           * Format: misskey:id
           * @default null
           */
          userId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string | null;
            title: string;
            text: string;
            imageUrl: string | null;
            icon: string;
            display: string;
            forYou: boolean;
            needConfirmationToRead: boolean;
            closeDuration: number;
            displayOrder: number;
            isRead?: boolean;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/announcements/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
   */
  'admin/announcements/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/announcements/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:announcements*
   */
  'admin/announcements/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** Format: misskey:id */
          userId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /**
               * Format: id
               * @example xxxxxxxxxx
               */
              id: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string | null;
              text: string;
              isActive: boolean;
              title: string;
              imageUrl: string | null;
              icon: string;
              display: string;
              forExistingUsers: boolean;
              needConfirmationToRead: boolean;
              closeDuration: number;
              displayOrder: number;
              userId: string | null;
              user: components['schemas']['UserLite'] | null;
              reads: number;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/announcements/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:announcements*
   */
  'admin/announcements/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
          title?: string;
          text?: string;
          imageUrl?: string | null;
          /** @enum {string} */
          icon?: 'info' | 'warning' | 'error' | 'success';
          /** @enum {string} */
          display?: 'normal' | 'banner' | 'dialog';
          forExistingUsers?: boolean;
          silence?: boolean;
          needConfirmationToRead?: boolean;
          /** @default 0 */
          closeDuration?: number;
          /** @default 0 */
          displayOrder?: number;
          isActive?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/avatar-decorations/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
   */
  'admin/avatar-decorations/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          description: string;
          url: string;
          roleIdsThatCanBeUsedThisDecoration?: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/avatar-decorations/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
   */
  'admin/avatar-decorations/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/avatar-decorations/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:avatar-decorations*
   */
  'admin/avatar-decorations/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** Format: misskey:id */
          userId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /**
               * Format: id
               * @example xxxxxxxxxx
               */
              id: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              updatedAt: string | null;
              name: string;
              description: string;
              url: string;
              roleIdsThatCanBeUsedThisDecoration: string[];
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/avatar-decorations/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:avatar-decorations*
   */
  'admin/avatar-decorations/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
          name?: string;
          description?: string;
          url?: string;
          roleIdsThatCanBeUsedThisDecoration?: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/delete-all-files-of-a-user
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:delete-all-files-of-a-user*
   */
  'admin/delete-all-files-of-a-user': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/unset-user-avatar
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:unset-user-avatar*
   */
  'admin/unset-user-avatar': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/unset-user-banner
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:unset-user-banner*
   */
  'admin/unset-user-banner': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/drive/clean-remote-files
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:drive*
   */
  'admin/drive/clean-remote-files': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/drive/cleanup
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:drive*
   */
  'admin/drive/cleanup': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/drive/files
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:drive*
   */
  'admin/drive/files': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** Format: misskey:id */
          userId?: string | null;
          type?: string | null;
          /**
           * @default local
           * @enum {string}
           */
          origin?: 'combined' | 'local' | 'remote';
          /**
           * @description The local host is represented with `null`.
           * @default null
           */
          hostname?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/drive/show-file
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:drive*
   */
  'admin/drive/show-file': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId?: string;
          url?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            id: string;
            /** Format: date-time */
            createdAt: string;
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            userId: string | null;
            /** @description The local host is represented with `null`. */
            userHost: string | null;
            /**
             * Format: md5
             * @example 15eca7fba0480996e2245f5185bf39f2
             */
            md5: string;
            /** @example lenna.jpg */
            name: string;
            /** @example image/jpeg */
            type: string;
            /** @example 51469 */
            size: number;
            comment: string | null;
            blurhash: string | null;
            properties: {
              width?: number;
              height?: number;
              orientation?: number;
              avgColor?: string;
            };
            /** @example true */
            storedInternal: boolean | null;
            /** Format: url */
            url: string | null;
            /** Format: url */
            thumbnailUrl: string | null;
            /** Format: url */
            webpublicUrl: string | null;
            accessKey: string | null;
            thumbnailAccessKey: string | null;
            webpublicAccessKey: string | null;
            uri: string | null;
            src: string | null;
            /**
             * Format: id
             * @example xxxxxxxxxx
             */
            folderId: string | null;
            isSensitive: boolean;
            isLink: boolean;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/add-aliases-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/add-aliases-bulk': {
    requestBody: {
      content: {
        'application/json': {
          ids: string[];
          aliases: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/add
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/add': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /** Format: misskey:id */
          fileId: string;
          /** @description Use `null` to reset the category. */
          category?: string | null;
          aliases?: string[];
          license?: string | null;
          isSensitive?: boolean;
          localOnly?: boolean;
          requestedBy?: string | null;
          memo?: string | null;
          roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/copy
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/copy': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          emojiId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** Format: id */
            id: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/delete-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/delete-bulk': {
    requestBody: {
      content: {
        'application/json': {
          ids: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/import-zip
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'admin/emoji/import-zip': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/list-remote
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
   */
  'admin/emoji/list-remote': {
    requestBody: {
      content: {
        'application/json': {
          /** @default null */
          query?: string | null;
          /**
           * @description Use `null` to represent the local host.
           * @default null
           */
          host?: string | null;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /** Format: id */
              id: string;
              aliases: string[];
              name: string;
              category: string | null;
              /** @description The local host is represented with `null`. */
              host: string | null;
              url: string;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
   */
  'admin/emoji/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default null */
          query?: string | null;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /** Format: id */
              id: string;
              aliases: string[];
              name: string;
              category: string | null;
              /** @description The local host is represented with `null`. The field exists for compatibility with other API endpoints that return files. */
              host: string | null;
              url: string;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/remove-aliases-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/remove-aliases-bulk': {
    requestBody: {
      content: {
        'application/json': {
          ids: string[];
          aliases: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/set-aliases-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/set-aliases-bulk': {
    requestBody: {
      content: {
        'application/json': {
          ids: string[];
          aliases: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/set-category-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/set-category-bulk': {
    requestBody: {
      content: {
        'application/json': {
          ids: string[];
          /** @description Use `null` to reset the category. */
          category?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/set-license-bulk
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/set-license-bulk': {
    requestBody: {
      content: {
        'application/json': {
          ids: string[];
          /** @description Use `null` to reset the license. */
          license?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/emoji/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:emoji*
   */
  'admin/emoji/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          id: string;
          name: string;
          /** Format: misskey:id */
          fileId?: string;
          /** @description Use `null` to reset the category. */
          category?: string | null;
          aliases: string[];
          license?: string | null;
          isSensitive?: boolean;
          localOnly?: boolean;
          requestedBy?: string | null;
          memo?: string | null;
          roleIdsThatCanBeUsedThisEmojiAsReaction?: string[];
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/federation/delete-all-files
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
   */
  'admin/federation/delete-all-files': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/federation/refresh-remote-instance-metadata
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
   */
  'admin/federation/refresh-remote-instance-metadata': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/federation/remove-all-following
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
   */
  'admin/federation/remove-all-following': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/federation/update-instance
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:federation*
   */
  'admin/federation/update-instance': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
          isSuspended: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/get-index-stats
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:index-stats*
   */
  'admin/get-index-stats': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              tablename: string;
              indexname: string;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/get-table-stats
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:table-stats*
   */
  'admin/get-table-stats': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            [key: string]: {
              count: number;
              size: number;
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/get-user-ips
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:user-ips*
   */
  'admin/get-user-ips': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              ip: string;
              /** Format: date-time */
              createdAt: string;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/invite/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:invite-codes*
   */
  'admin/invite/create': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 1 */
          count?: number;
          expiresAt?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['InviteCode'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/invite/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:invite-codes*
   */
  'admin/invite/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 30 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /**
           * @default all
           * @enum {string}
           */
          type?: 'unused' | 'used' | 'expired' | 'all';
          /** @enum {string} */
          sort?: '+createdAt' | '-createdAt' | '+usedAt' | '-usedAt';
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['InviteCode'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/promo/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:promo*
   */
  'admin/promo/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          expiresAt: number;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/queue/clear
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:queue*
   */
  'admin/queue/clear': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/queue/deliver-delayed
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:queue*
   */
  'admin/queue/deliver-delayed': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ((string | number)[])[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/queue/inbox-delayed
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:queue*
   */
  'admin/queue/inbox-delayed': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ((string | number)[])[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/queue/promote
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:queue*
   */
  'admin/queue/promote': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          type: 'deliver' | 'inbox';
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/queue/stats
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:emoji*
   */
  'admin/queue/stats': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            deliver: components['schemas']['QueueCount'];
            inbox: components['schemas']['QueueCount'];
            db: components['schemas']['QueueCount'];
            objectStorage: components['schemas']['QueueCount'];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/relays/add
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:relays*
   */
  'admin/relays/add': {
    requestBody: {
      content: {
        'application/json': {
          inbox: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** Format: id */
            id: string;
            /** Format: url */
            inbox: string;
            /**
             * @default requesting
             * @enum {string}
             */
            status: 'requesting' | 'accepted' | 'rejected';
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/relays/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:relays*
   */
  'admin/relays/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /** Format: id */
              id: string;
              /** Format: url */
              inbox: string;
              /**
               * @default requesting
               * @enum {string}
               */
              status: 'requesting' | 'accepted' | 'rejected';
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/relays/remove
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:relays*
   */
  'admin/relays/remove': {
    requestBody: {
      content: {
        'application/json': {
          inbox: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/reset-password
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:reset-password*
   */
  'admin/reset-password': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            password: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/resolve-abuse-user-report
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:resolve-abuse-user-report*
   */
  'admin/resolve-abuse-user-report': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          reportId: string;
          /** @default false */
          forward?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/send-email
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:send-email*
   */
  'admin/send-email': {
    requestBody: {
      content: {
        'application/json': {
          to: string;
          subject: string;
          text: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/server-info
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:server-info*
   */
  'admin/server-info': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            machine: string;
            /** @example linux */
            os: string;
            node: string;
            psql: string;
            cpu: {
              model: string;
              cores: number;
            };
            mem: {
              /** Format: bytes */
              total: number;
            };
            fs: {
              /** Format: bytes */
              total: number;
              /** Format: bytes */
              used: number;
            };
            net: {
              /** @example eth0 */
              interface: string;
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/show-moderation-logs
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:show-moderation-log*
   */
  'admin/show-moderation-logs': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          type?: string | null;
          /** Format: misskey:id */
          userId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: id */
              id: string;
              /** Format: date-time */
              createdAt: string;
              type: string;
              info: Record<string, never>;
              /** Format: id */
              userId: string;
              user: components['schemas']['UserDetailedNotMe'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/show-user
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:show-user*
   */
  'admin/show-user': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            email: string | null;
            emailVerified: boolean;
            autoAcceptFollowed: boolean;
            noCrawle: boolean;
            preventAiLearning: boolean;
            alwaysMarkNsfw: boolean;
            autoSensitive: boolean;
            carefulBot: boolean;
            injectFeaturedNote: boolean;
            receiveAnnouncementEmail: boolean;
            mutedWords: (string | string[])[];
            mutedInstances: string[];
            notificationRecieveConfig: {
              note?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              follow?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              mention?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              reply?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              renote?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              quote?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              reaction?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              pollEnded?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              receiveFollowRequest?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              followRequestAccepted?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              roleAssigned?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              achievementEarned?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              app?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
              test?: OneOf<[{
                /** @enum {string} */
                type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
              }, {
                /** @enum {string} */
                type: 'list';
                /** Format: misskey:id */
                userListId: string;
              }]>;
            };
            isModerator: boolean;
            isSilenced: boolean;
            isSuspended: boolean;
            isHibernated: boolean;
            lastActiveDate: string | null;
            moderationNote: string;
            signins: components['schemas']['Signin'][];
            policies: components['schemas']['RolePolicies'];
            roles: components['schemas']['Role'][];
            roleAssigns: ({
                createdAt: string;
                expiresAt: string | null;
                roleId: string;
              })[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/show-users
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:show-users*
   */
  'admin/show-users': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @enum {string} */
          sort?: '+follower' | '-follower' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt' | '+lastActiveDate' | '-lastActiveDate';
          /**
           * @default all
           * @enum {string}
           */
          state?: 'all' | 'alive' | 'available' | 'admin' | 'moderator' | 'adminOrModerator' | 'suspended';
          /**
           * @default combined
           * @enum {string}
           */
          origin?: 'combined' | 'local' | 'remote';
          /** @default null */
          username?: string | null;
          /**
           * @description The local host is represented with `null`.
           * @default null
           */
          hostname?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailed'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/suspend-user
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:suspend-user*
   */
  'admin/suspend-user': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/unsuspend-user
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:unsuspend-user*
   */
  'admin/unsuspend-user': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/update-meta
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:meta*
   */
  'admin/update-meta': {
    requestBody: {
      content: {
        'application/json': {
          disableRegistration?: boolean | null;
          pinnedUsers?: string[] | null;
          hiddenTags?: string[] | null;
          blockedHosts?: string[] | null;
          sensitiveWords?: string[] | null;
          prohibitedWords?: string[] | null;
          allowedHosts?: string[] | null;
          enableAllowedHostsInWhiteList?: boolean | null;
          themeColor?: string | null;
          mascotImageUrl?: string | null;
          bannerUrl?: string | null;
          serverErrorImageUrl?: string | null;
          infoImageUrl?: string | null;
          notFoundImageUrl?: string | null;
          iconUrl?: string | null;
          app192IconUrl?: string | null;
          app512IconUrl?: string | null;
          backgroundImageUrl?: string | null;
          logoImageUrl?: string | null;
          name?: string | null;
          shortName?: string | null;
          description?: string | null;
          defaultLightTheme?: string | null;
          defaultDarkTheme?: string | null;
          cacheRemoteFiles?: boolean;
          cacheRemoteSensitiveFiles?: boolean;
          emailRequiredForSignup?: boolean;
          enableHcaptcha?: boolean;
          hcaptchaSiteKey?: string | null;
          hcaptchaSecretKey?: string | null;
          enableMcaptcha?: boolean;
          mcaptchaSiteKey?: string | null;
          mcaptchaInstanceUrl?: string | null;
          mcaptchaSecretKey?: string | null;
          enableRecaptcha?: boolean;
          recaptchaSiteKey?: string | null;
          recaptchaSecretKey?: string | null;
          enableTurnstile?: boolean;
          turnstileSiteKey?: string | null;
          turnstileSecretKey?: string | null;
          /** @enum {string} */
          sensitiveMediaDetection?: 'none' | 'all' | 'local' | 'remote';
          /** @enum {string} */
          sensitiveMediaDetectionSensitivity?: 'medium' | 'low' | 'high' | 'veryLow' | 'veryHigh';
          setSensitiveFlagAutomatically?: boolean;
          enableSensitiveMediaDetectionForVideos?: boolean;
          /** Format: misskey:id */
          proxyAccountId?: string | null;
          maintainerName?: string | null;
          maintainerEmail?: string | null;
          langs?: string[];
          summalyProxy?: string | null;
          deeplAuthKey?: string | null;
          deeplIsPro?: boolean;
          enableEmail?: boolean;
          email?: string | null;
          smtpSecure?: boolean;
          smtpHost?: string | null;
          smtpPort?: number | null;
          smtpUser?: string | null;
          smtpPass?: string | null;
          enableServiceWorker?: boolean;
          swPublicKey?: string | null;
          swPrivateKey?: string | null;
          tosUrl?: string | null;
          repositoryUrl?: string | null;
          feedbackUrl?: string | null;
          impressumUrl?: string | null;
          privacyPolicyUrl?: string | null;
          useObjectStorage?: boolean;
          objectStorageBaseUrl?: string | null;
          objectStorageBucket?: string | null;
          objectStoragePrefix?: string | null;
          objectStorageEndpoint?: string | null;
          objectStorageRegion?: string | null;
          objectStoragePort?: number | null;
          objectStorageAccessKey?: string | null;
          objectStorageSecretKey?: string | null;
          objectStorageUseSSL?: boolean;
          objectStorageUseProxy?: boolean;
          objectStorageSetPublicRead?: boolean;
          objectStorageS3ForcePathStyle?: boolean;
          enableIpLogging?: boolean;
          enableActiveEmailValidation?: boolean;
          enableVerifymailApi?: boolean;
          verifymailAuthKey?: string | null;
          enableTruemailApi?: boolean;
          truemailInstance?: string | null;
          truemailAuthKey?: string | null;
          enableChartsForRemoteUser?: boolean;
          enableChartsForFederatedInstances?: boolean;
          enableServerMachineStats?: boolean;
          enableIdenticonGeneration?: boolean;
          serverRules?: string[];
          bannedEmailDomains?: string[];
          preservedUsernames?: string[];
          manifestJsonOverride?: string;
          enableFanoutTimeline?: boolean;
          enableFanoutTimelineDbFallback?: boolean;
          perLocalUserUserTimelineCacheMax?: number;
          perRemoteUserUserTimelineCacheMax?: number;
          perUserHomeTimelineCacheMax?: number;
          perUserListTimelineCacheMax?: number;
          notesPerOneAd?: number;
          commerceDisclosureUrl?: string | null;
          silencedHosts?: string[] | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/delete-account
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:delete-account*
   */
  'admin/delete-account': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/update-user-note
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:user-note*
   */
  'admin/update-user-note': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          text: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
   */
  'admin/roles/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          description: string;
          color: string | null;
          iconUrl: string | null;
          /** @enum {string} */
          target: 'manual' | 'conditional';
          condFormula: Record<string, never>;
          isPublic: boolean;
          isModerator: boolean;
          isAdministrator: boolean;
          /** @default false */
          isExplorable?: boolean;
          asBadge: boolean;
          canEditMembersByModerator: boolean;
          displayOrder: number;
          policies: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Role'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
   */
  'admin/roles/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:roles*
   */
  'admin/roles/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Role'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:admin:roles*
   */
  'admin/roles/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Role'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
   */
  'admin/roles/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
          name: string;
          description: string;
          color: string | null;
          iconUrl: string | null;
          /** @enum {string} */
          target: 'manual' | 'conditional';
          condFormula: Record<string, never>;
          isPublic: boolean;
          isModerator: boolean;
          isAdministrator: boolean;
          isExplorable?: boolean;
          asBadge: boolean;
          canEditMembersByModerator: boolean;
          displayOrder: number;
          policies: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/assign
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
   */
  'admin/roles/assign': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
          /** Format: misskey:id */
          userId: string;
          expiresAt?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/unassign
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
   */
  'admin/roles/unassign': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/update-default-policies
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:admin:roles*
   */
  'admin/roles/update-default-policies': {
    requestBody: {
      content: {
        'application/json': {
          policies: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/roles/users
   * @description No description provided.
   *
   * **Credential required**: *No* / **Permission**: *read:admin:roles*
   */
  'admin/roles/users': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /** Format: misskey:id */
              id: string;
              /** Format: date-time */
              createdAt: string;
              user: components['schemas']['UserDetailed'];
              /** Format: date-time */
              expiresAt: string | null;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/subscription-plans/create
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes* / **Permission**: *write:admin:subscription-plans*
   */
  'admin/subscription-plans/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          price: number;
          currency: string;
          description?: string;
          stripePriceId: string;
          /** Format: misskey:id */
          roleId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionPlan'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/subscription-plans/update
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes* / **Permission**: *write:admin:subscription-plans*
   */
  'admin/subscription-plans/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          planId: string;
          name?: string;
          price?: number;
          currency?: string;
          description?: string;
          /** Format: misskey:id */
          roleId?: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * admin/subscription-plans/archive
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes* / **Permission**: *write:admin:subscription-plans*
   */
  'admin/subscription-plans/archive': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          planId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * announcements
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  announcements: {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @default true */
          isActive?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Announcement'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * antennas/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'antennas/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /** @enum {string} */
          src: 'home' | 'all' | 'users' | 'list' | 'users_blacklist';
          /** Format: misskey:id */
          userListId?: string | null;
          keywords: string[][];
          excludeKeywords: string[][];
          users: string[];
          caseSensitive: boolean;
          localOnly?: boolean;
          withReplies: boolean;
          withFile: boolean;
          notify: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Antenna'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * antennas/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'antennas/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          antennaId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * antennas/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'antennas/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Antenna'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * antennas/notes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'antennas/notes': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          antennaId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * antennas/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'antennas/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          antennaId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Antenna'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * antennas/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'antennas/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          antennaId: string;
          name: string;
          /** @enum {string} */
          src: 'home' | 'all' | 'users' | 'list' | 'users_blacklist';
          /** Format: misskey:id */
          userListId?: string | null;
          keywords: string[][];
          excludeKeywords: string[][];
          users: string[];
          caseSensitive: boolean;
          localOnly?: boolean;
          withReplies: boolean;
          withFile: boolean;
          notify: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Antenna'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * ap/get
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:federation*
   */
  'ap/get': {
    requestBody: {
      content: {
        'application/json': {
          uri: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * ap/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'ap/show': {
    requestBody: {
      content: {
        'application/json': {
          uri: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': OneOf<[{
            /** @enum {string} */
            type: 'User';
            object: components['schemas']['UserDetailedNotMe'];
          }, {
            /** @enum {string} */
            type: 'Note';
            object: components['schemas']['Note'];
          }]>;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * app/create
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'app/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          description: string;
          permission: string[];
          callbackUrl?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['App'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * app/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'app/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          appId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['App'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * auth/accept
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'auth/accept': {
    requestBody: {
      content: {
        'application/json': {
          token: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * auth/session/generate
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'auth/session/generate': {
    requestBody: {
      content: {
        'application/json': {
          appSecret: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            token: string;
            /** Format: url */
            url: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * auth/session/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'auth/session/show': {
    requestBody: {
      content: {
        'application/json': {
          token: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** Format: id */
            id: string;
            app: components['schemas']['App'];
            token: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * auth/session/userkey
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'auth/session/userkey': {
    requestBody: {
      content: {
        'application/json': {
          appSecret: string;
          token: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            accessToken: string;
            user: components['schemas']['UserDetailedNotMe'];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * blocking/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:blocks*
   */
  'blocking/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailedNotMe'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * blocking/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:blocks*
   */
  'blocking/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailedNotMe'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * blocking/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:blocks*
   */
  'blocking/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 30 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Blocking'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  'channels/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          description?: string | null;
          /** Format: misskey:id */
          bannerId?: string | null;
          color?: string;
          isSensitive?: boolean | null;
          allowRenoteToExternal?: boolean | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'channels/featured': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/follow
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  'channels/follow': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/followed
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:channels*
   */
  'channels/followed': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 5 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/owned
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:channels*
   */
  'channels/owned': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 5 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'channels/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/timeline
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'channels/timeline': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
          /** @default false */
          allowPartial?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/unfollow
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  'channels/unfollow': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  'channels/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
          name?: string;
          description?: string | null;
          /** Format: misskey:id */
          bannerId?: string | null;
          isArchived?: boolean | null;
          pinnedNoteIds?: string[];
          color?: string;
          isSensitive?: boolean | null;
          allowRenoteToExternal?: boolean | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/favorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  'channels/favorite': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/unfavorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:channels*
   */
  'channels/unfavorite': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          channelId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/my-favorites
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:channels*
   */
  'channels/my-favorites': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * channels/search
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'channels/search': {
    requestBody: {
      content: {
        'application/json': {
          query: string;
          /**
           * @default nameAndDescription
           * @enum {string}
           */
          type?: 'nameAndDescription' | 'nameOnly';
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 5 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Channel'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/active-users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/active-users': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            readWrite: number[];
            read: number[];
            write: number[];
            registeredWithinWeek: number[];
            registeredWithinMonth: number[];
            registeredWithinYear: number[];
            registeredOutsideWeek: number[];
            registeredOutsideMonth: number[];
            registeredOutsideYear: number[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/ap-request
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/ap-request': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            deliverFailed: number[];
            deliverSucceeded: number[];
            inboxReceived: number[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/drive
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/drive': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            local: {
              incCount: number[];
              incSize: number[];
              decCount: number[];
              decSize: number[];
            };
            remote: {
              incCount: number[];
              incSize: number[];
              decCount: number[];
              decSize: number[];
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/federation
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/federation': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            deliveredInstances: number[];
            inboxInstances: number[];
            stalled: number[];
            sub: number[];
            pub: number[];
            pubsub: number[];
            subActive: number[];
            pubActive: number[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/instance
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/instance': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          host: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            requests: {
              failed: number[];
              succeeded: number[];
              received: number[];
            };
            notes: {
              total: number[];
              inc: number[];
              dec: number[];
              diffs: {
                normal: number[];
                reply: number[];
                renote: number[];
                withFile: number[];
              };
            };
            users: {
              total: number[];
              inc: number[];
              dec: number[];
            };
            following: {
              total: number[];
              inc: number[];
              dec: number[];
            };
            followers: {
              total: number[];
              inc: number[];
              dec: number[];
            };
            drive: {
              totalFiles: number[];
              incFiles: number[];
              decFiles: number[];
              incUsage: number[];
              decUsage: number[];
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/notes': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            local: {
              total: number[];
              inc: number[];
              dec: number[];
              diffs: {
                normal: number[];
                reply: number[];
                renote: number[];
                withFile: number[];
              };
            };
            remote: {
              total: number[];
              inc: number[];
              dec: number[];
              diffs: {
                normal: number[];
                reply: number[];
                renote: number[];
                withFile: number[];
              };
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/user/drive
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/user/drive': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            totalCount: number[];
            totalSize: number[];
            incCount: number[];
            incSize: number[];
            decCount: number[];
            decSize: number[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/user/following
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/user/following': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            local: {
              followings: {
                total: number[];
                inc: number[];
                dec: number[];
              };
              followers: {
                total: number[];
                inc: number[];
                dec: number[];
              };
            };
            remote: {
              followings: {
                total: number[];
                inc: number[];
                dec: number[];
              };
              followers: {
                total: number[];
                inc: number[];
                dec: number[];
              };
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/user/notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/user/notes': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            total: number[];
            inc: number[];
            dec: number[];
            diffs: {
              normal: number[];
              reply: number[];
              renote: number[];
              withFile: number[];
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/user/pv
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/user/pv': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            upv: {
              user: number[];
              visitor: number[];
            };
            pv: {
              user: number[];
              visitor: number[];
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/user/reactions
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/user/reactions': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            local: {
              count: number[];
            };
            remote: {
              count: number[];
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * charts/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'charts/users': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          span: 'day' | 'hour';
          /** @default 30 */
          limit?: number;
          /** @default null */
          offset?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            local: {
              total: number[];
              inc: number[];
              dec: number[];
            };
            remote: {
              total: number[];
              inc: number[];
              dec: number[];
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/add-note
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'clips/add-note': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/remove-note
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'clips/remove-note': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'clips/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /** @default false */
          isPublic?: boolean;
          description?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'clips/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'clips/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/notes
   * @description No description provided.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  'clips/notes': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/show
   * @description No description provided.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  'clips/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'clips/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
          name: string;
          isPublic?: boolean;
          description?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/favorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
   */
  'clips/favorite': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/unfavorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:clip-favorite*
   */
  'clips/unfavorite': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          clipId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * clips/my-favorites
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:clip-favorite*
   */
  'clips/my-favorites': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  drive: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            capacity: number;
            usage: number;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/files': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /**
           * Format: misskey:id
           * @default null
           */
          folderId?: string | null;
          type?: string | null;
          /** @enum {string|null} */
          sort?: '+createdAt' | '-createdAt' | '+name' | '-name' | '+size' | '-size' | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/attached-notes
   * @description Find the notes to which the given file is attached.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/files/attached-notes': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/check-existence
   * @description Check if a given file exists.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/files/check-existence': {
    requestBody: {
      content: {
        'application/json': {
          md5: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': boolean;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/create
   * @description Upload a new drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  'drive/files/create': {
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: misskey:id
           * @default null
           */
          folderId?: string | null;
          /** @default null */
          name?: string | null;
          /** @default null */
          comment?: string | null;
          /** @default false */
          isSensitive?: boolean;
          /** @default false */
          force?: boolean;
          /**
           * Format: binary
           * @description The file contents.
           */
          file: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/delete
   * @description Delete an existing drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  'drive/files/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/find-by-hash
   * @description Search for a drive file by a hash of the contents.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/files/find-by-hash': {
    requestBody: {
      content: {
        'application/json': {
          md5: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/find
   * @description Search for a drive file by the given parameters.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/files/find': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /**
           * Format: misskey:id
           * @default null
           */
          folderId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/show
   * @description Show the properties of a drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/files/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId?: string;
          url?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/files/update
   * @description Update the properties of a drive file.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  'drive/files/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
          /** Format: misskey:id */
          folderId?: string | null;
          name?: string;
          isSensitive?: boolean;
          comment?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/folders
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/folders': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /**
           * Format: misskey:id
           * @default null
           */
          folderId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFolder'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/folders/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  'drive/folders/create': {
    requestBody: {
      content: {
        'application/json': {
          /** @default Untitled */
          name?: string;
          /** Format: misskey:id */
          parentId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFolder'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/folders/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  'drive/folders/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          folderId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/folders/find
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/folders/find': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /**
           * Format: misskey:id
           * @default null
           */
          parentId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFolder'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/folders/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/folders/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          folderId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFolder'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/folders/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:drive*
   */
  'drive/folders/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          folderId: string;
          name?: string;
          /** Format: misskey:id */
          parentId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFolder'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * drive/stream
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:drive*
   */
  'drive/stream': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          type?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['DriveFile'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * email-address/available
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'email-address/available': {
    requestBody: {
      content: {
        'application/json': {
          emailAddress: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            available: boolean;
            reason: string | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * endpoint
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  endpoint: {
    requestBody: {
      content: {
        'application/json': {
          endpoint: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            params: {
                name: string;
                type: string;
              }[];
          } | null;
        };
      };
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * endpoints
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  endpoints: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': string[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * export-custom-emojis
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'export-custom-emojis': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/followers
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/followers': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Following'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/following
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/following': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Following'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/instances
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/instances': {
    requestBody: {
      content: {
        'application/json': {
          /** @description Omit or use `null` to not filter by host. */
          host?: string | null;
          blocked?: boolean | null;
          notResponding?: boolean | null;
          suspended?: boolean | null;
          silenced?: boolean | null;
          federating?: boolean | null;
          subscribing?: boolean | null;
          publishing?: boolean | null;
          /** @default 30 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @enum {string|null} */
          sort?: '+pubSub' | '-pubSub' | '+notes' | '-notes' | '+users' | '-users' | '+following' | '-following' | '+followers' | '-followers' | '+firstRetrievedAt' | '-firstRetrievedAt' | '+latestRequestReceivedAt' | '-latestRequestReceivedAt' | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['FederationInstance'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/show-instance
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/show-instance': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['FederationInstance'] | null;
        };
      };
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/update-remote-user
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/update-remote-user': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/users': {
    requestBody: {
      content: {
        'application/json': {
          host: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailedNotMe'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * federation/stats
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'federation/stats': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            topSubInstances: components['schemas']['FederationInstance'][];
            otherFollowersCount: number;
            topPubInstances: components['schemas']['FederationInstance'][];
            otherFollowingCount: number;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          withReplies?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserLite'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserLite'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @enum {string} */
          notify?: 'normal' | 'none';
          withReplies?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserLite'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/update-all
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/update-all': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          notify?: 'normal' | 'none';
          withReplies?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/invalidate
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/invalidate': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserLite'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/requests/accept
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/requests/accept': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/requests/cancel
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/requests/cancel': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserLite'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/requests/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:following*
   */
  'following/requests/list': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: id */
              id: string;
              follower: components['schemas']['UserLite'];
              followee: components['schemas']['UserLite'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * following/requests/reject
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:following*
   */
  'following/requests/reject': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'gallery/featured': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/popular
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'gallery/popular': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'gallery/posts': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery*
   */
  'gallery/posts/create': {
    requestBody: {
      content: {
        'application/json': {
          title: string;
          description?: string | null;
          fileIds: string[];
          /** @default false */
          isSensitive?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery*
   */
  'gallery/posts/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          postId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts/like
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
   */
  'gallery/posts/like': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          postId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'gallery/posts/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          postId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts/unlike
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery-likes*
   */
  'gallery/posts/unlike': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          postId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * gallery/posts/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:gallery*
   */
  'gallery/posts/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          postId: string;
          title: string;
          description?: string | null;
          fileIds: string[];
          /** @default false */
          isSensitive?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * get-online-users-count
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'get-online-users-count': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            count: number;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * get-avatar-decorations
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'get-avatar-decorations': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /**
               * Format: id
               * @example xxxxxxxxxx
               */
              id: string;
              name: string;
              description: string;
              url: string;
              roleIdsThatCanBeUsedThisDecoration: string[];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * hashtags/list
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'hashtags/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default false */
          attachedToUserOnly?: boolean;
          /** @default false */
          attachedToLocalUserOnly?: boolean;
          /** @default false */
          attachedToRemoteUserOnly?: boolean;
          /** @enum {string} */
          sort: '+mentionedUsers' | '-mentionedUsers' | '+mentionedLocalUsers' | '-mentionedLocalUsers' | '+mentionedRemoteUsers' | '-mentionedRemoteUsers' | '+attachedUsers' | '-attachedUsers' | '+attachedLocalUsers' | '-attachedLocalUsers' | '+attachedRemoteUsers' | '-attachedRemoteUsers';
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Hashtag'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * hashtags/search
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'hashtags/search': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          query: string;
          /** @default 0 */
          offset?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': string[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * hashtags/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'hashtags/show': {
    requestBody: {
      content: {
        'application/json': {
          tag: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Hashtag'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * hashtags/trend
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'hashtags/trend': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              tag: string;
              chart: number[];
              usersCount: number;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * hashtags/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'hashtags/users': {
    requestBody: {
      content: {
        'application/json': {
          tag: string;
          /** @default 10 */
          limit?: number;
          /** @enum {string} */
          sort: '+follower' | '-follower' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt';
          /**
           * @default all
           * @enum {string}
           */
          state?: 'all' | 'alive';
          /**
           * @default local
           * @enum {string}
           */
          origin?: 'combined' | 'local' | 'remote';
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailed'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  i: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['MeDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/done
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/done': {
    requestBody: {
      content: {
        'application/json': {
          token: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            backupCodes: string[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/key-done
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/key-done': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          token?: string | null;
          name: string;
          credential: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            id: string;
            name: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/password-less
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/password-less': {
    requestBody: {
      content: {
        'application/json': {
          value: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/register-key
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/register-key': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            rp: {
              id?: string;
            };
            user: {
              id: string;
              name: string;
              displayName: string;
            };
            challenge: string;
            pubKeyCredParams: {
                type: string;
                alg: number;
              }[];
            timeout: number | null;
            excludeCredentials: (({
                id: string;
                type: string;
                transports: ('ble' | 'cable' | 'hybrid' | 'internal' | 'nfc' | 'smart-card' | 'usb')[];
              })[]) | null;
            authenticatorSelection: ({
              /** @enum {string} */
              authenticatorAttachment: 'cross-platform' | 'platform';
              requireResidentKey: boolean;
              /** @enum {string} */
              userVerification: 'discouraged' | 'preferred' | 'required';
            }) | null;
            /** @enum {string|null} */
            attestation: 'direct' | 'enterprise' | 'indirect' | 'none' | null;
            extensions: ({
              appid: string | null;
              credProps: boolean | null;
              hmacCreateSecret: boolean | null;
            }) | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/register
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/register': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            qr: string;
            url: string;
            secret: string;
            label: string;
            issuer: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/update-key
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/update-key': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          credentialId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/remove-key
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/remove-key': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          token?: string | null;
          credentialId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/2fa/unregister
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/2fa/unregister': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/apps
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/apps': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          sort?: '+createdAt' | '-createdAt' | '+lastUsedAt' | '-lastUsedAt';
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: misskey:id */
              id: string;
              name?: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: date-time */
              lastUsedAt?: string;
              permission: string[];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/authorized-apps
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/authorized-apps': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /**
           * @default desc
           * @enum {string}
           */
          sort?: 'desc' | 'asc';
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /** Format: misskey:id */
              id: string;
              name: string;
              callbackUrl: string | null;
              permission: string[];
              isAuthorized?: boolean;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/claim-achievement
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/claim-achievement': {
    requestBody: {
      content: {
        'application/json': {
          /** @enum {string} */
          name: 'notes1' | 'notes10' | 'notes100' | 'notes500' | 'notes1000' | 'notes5000' | 'notes10000' | 'notes20000' | 'notes30000' | 'notes40000' | 'notes50000' | 'notes60000' | 'notes70000' | 'notes80000' | 'notes90000' | 'notes100000' | 'login3' | 'login7' | 'login15' | 'login30' | 'login60' | 'login100' | 'login200' | 'login300' | 'login400' | 'login500' | 'login600' | 'login700' | 'login800' | 'login900' | 'login1000' | 'passedSinceAccountCreated1' | 'passedSinceAccountCreated2' | 'passedSinceAccountCreated3' | 'loggedInOnBirthday' | 'loggedInOnNewYearsDay' | 'noteClipped1' | 'noteFavorited1' | 'myNoteFavorited1' | 'profileFilled' | 'markedAsCat' | 'following1' | 'following10' | 'following50' | 'following100' | 'following300' | 'followers1' | 'followers10' | 'followers50' | 'followers100' | 'followers300' | 'followers500' | 'followers1000' | 'collectAchievements30' | 'viewAchievements3min' | 'iLoveMisskey' | 'foundTreasure' | 'client30min' | 'client60min' | 'noteDeletedWithin1min' | 'postedAtLateNight' | 'postedAt0min0sec' | 'selfQuote' | 'htl20npm' | 'viewInstanceChart' | 'outputHelloWorldOnScratchpad' | 'open3windows' | 'driveFolderCircularReference' | 'reactWithoutRead' | 'clickedClickHere' | 'justPlainLucky' | 'setNameToSyuilo' | 'cookieClicked' | 'brainDiver' | 'smashTestNotificationButton' | 'tutorialCompleted' | 'bubbleGameExplodingHead' | 'bubbleGameDoubleExplodingHead';
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/change-password
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/change-password': {
    requestBody: {
      content: {
        'application/json': {
          currentPassword: string;
          newPassword: string;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/delete-account
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/delete-account': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-blocking
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-blocking': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-following
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-following': {
    requestBody: {
      content: {
        'application/json': {
          /** @default false */
          excludeMuting?: boolean;
          /** @default false */
          excludeInactive?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-mute
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-mute': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-notes
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-notes': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-clips
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-clips': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-favorites
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-favorites': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-user-lists
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-user-lists': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/export-antennas
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/export-antennas': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/favorites
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:favorites*
   */
  'i/favorites': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['NoteFavorite'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/gallery/likes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:gallery-likes*
   */
  'i/gallery/likes': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: id */
              id: string;
              post: components['schemas']['GalleryPost'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/gallery/posts
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:gallery*
   */
  'i/gallery/posts': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/import-blocking
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/import-blocking': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/import-following
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/import-following': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
          withReplies?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/import-muting
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/import-muting': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/import-user-lists
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/import-user-lists': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/import-antennas
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/import-antennas': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          fileId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/notifications
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:notifications*
   */
  'i/notifications': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default true */
          markAsRead?: boolean;
          includeTypes?: ('note' | 'follow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'achievementEarned' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
          excludeTypes?: ('note' | 'follow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'achievementEarned' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Notification'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/notifications-grouped
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:notifications*
   */
  'i/notifications-grouped': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default true */
          markAsRead?: boolean;
          includeTypes?: ('note' | 'follow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'achievementEarned' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
          excludeTypes?: ('note' | 'follow' | 'mention' | 'reply' | 'renote' | 'quote' | 'reaction' | 'pollEnded' | 'receiveFollowRequest' | 'followRequestAccepted' | 'roleAssigned' | 'achievementEarned' | 'app' | 'test' | 'pollVote' | 'groupInvited')[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Notification'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/page-likes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:page-likes*
   */
  'i/page-likes': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: id */
              id: string;
              page: components['schemas']['Page'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/pages
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:pages*
   */
  'i/pages': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Page'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/pin
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/pin': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['MeDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/read-all-unread-notes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/read-all-unread-notes': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/read-announcement
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/read-announcement': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          announcementId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/regenerate-token
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/regenerate-token': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/get-all
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/registry/get-all': {
    requestBody: {
      content: {
        'application/json': {
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/get-detail
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/registry/get-detail': {
    requestBody: {
      content: {
        'application/json': {
          key: string;
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            updatedAt: string;
            value: unknown;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/get
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/registry/get': {
    requestBody: {
      content: {
        'application/json': {
          key: string;
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/keys-with-type
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/registry/keys-with-type': {
    requestBody: {
      content: {
        'application/json': {
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            [key: string]: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/keys
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/registry/keys': {
    requestBody: {
      content: {
        'application/json': {
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': string[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/remove
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/registry/remove': {
    requestBody: {
      content: {
        'application/json': {
          key: string;
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/scopes-with-domain
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/registry/scopes-with-domain': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              scopes: string[][];
              domain: string | null;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/registry/set
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/registry/set': {
    requestBody: {
      content: {
        'application/json': {
          key: string;
          value: unknown;
          /** @default [] */
          scope: string[];
          domain?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/revoke-token
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/revoke-token': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          tokenId?: string;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/signin-history
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/signin-history': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Signin'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/unpin
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/unpin': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['MeDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/update-email
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/update-email': {
    requestBody: {
      content: {
        'application/json': {
          password: string;
          email?: string | null;
          token?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['MeDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/update': {
    requestBody: {
      content: {
        'application/json': {
          name?: string | null;
          description?: string | null;
          location?: string | null;
          birthday?: string | null;
          /** @enum {string|null} */
          lang?: null | 'ach' | 'ady' | 'af' | 'af-NA' | 'af-ZA' | 'ak' | 'ar' | 'ar-AR' | 'ar-MA' | 'ar-SA' | 'ay-BO' | 'az' | 'az-AZ' | 'be-BY' | 'bg' | 'bg-BG' | 'bn' | 'bn-IN' | 'bn-BD' | 'br' | 'bs-BA' | 'ca' | 'ca-ES' | 'cak' | 'ck-US' | 'cs' | 'cs-CZ' | 'cy' | 'cy-GB' | 'da' | 'da-DK' | 'de' | 'de-AT' | 'de-DE' | 'de-CH' | 'dsb' | 'el' | 'el-GR' | 'en' | 'en-GB' | 'en-AU' | 'en-CA' | 'en-IE' | 'en-IN' | 'en-PI' | 'en-SG' | 'en-UD' | 'en-US' | 'en-ZA' | 'en@pirate' | 'eo' | 'eo-EO' | 'es' | 'es-AR' | 'es-419' | 'es-CL' | 'es-CO' | 'es-EC' | 'es-ES' | 'es-LA' | 'es-NI' | 'es-MX' | 'es-US' | 'es-VE' | 'et' | 'et-EE' | 'eu' | 'eu-ES' | 'fa' | 'fa-IR' | 'fb-LT' | 'ff' | 'fi' | 'fi-FI' | 'fo' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fr-BE' | 'fr-CH' | 'fy-NL' | 'ga' | 'ga-IE' | 'gd' | 'gl' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'gv' | 'gx-GR' | 'he' | 'he-IL' | 'hi' | 'hi-IN' | 'hr' | 'hr-HR' | 'hsb' | 'ht' | 'hu' | 'hu-HU' | 'hy' | 'hy-AM' | 'id' | 'id-ID' | 'is' | 'is-IS' | 'it' | 'it-IT' | 'ja' | 'ja-JP' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km' | 'kl' | 'km-KH' | 'kab' | 'kn' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'kw' | 'la' | 'la-VA' | 'lb' | 'li-NL' | 'lt' | 'lt-LT' | 'lv' | 'lv-LV' | 'mai' | 'mg-MG' | 'mk' | 'mk-MK' | 'ml' | 'ml-IN' | 'mn-MN' | 'mr' | 'mr-IN' | 'ms' | 'ms-MY' | 'mt' | 'mt-MT' | 'my' | 'no' | 'nb' | 'nb-NO' | 'ne' | 'ne-NP' | 'nl' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'oc' | 'or-IN' | 'pa' | 'pa-IN' | 'pl' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'qu-PE' | 'rm-CH' | 'ro' | 'ro-RO' | 'ru' | 'ru-RU' | 'sa-IN' | 'se-NO' | 'sh' | 'si-LK' | 'sk' | 'sk-SK' | 'sl' | 'sl-SI' | 'so-SO' | 'sq' | 'sq-AL' | 'sr' | 'sr-RS' | 'su' | 'sv' | 'sv-SE' | 'sw' | 'sw-KE' | 'ta' | 'ta-IN' | 'te' | 'te-IN' | 'tg' | 'tg-TJ' | 'th' | 'th-TH' | 'fil' | 'tlh' | 'tr' | 'tr-TR' | 'tt-RU' | 'uk' | 'uk-UA' | 'ur' | 'ur-PK' | 'uz' | 'uz-UZ' | 'vi' | 'vi-VN' | 'xh-ZA' | 'yi' | 'yi-DE' | 'zh' | 'zh-Hans' | 'zh-Hant' | 'zh-CN' | 'zh-HK' | 'zh-SG' | 'zh-TW' | 'zu-ZA';
          /** Format: misskey:id */
          avatarId?: string | null;
          avatarDecorations?: ({
              /** Format: misskey:id */
              id: string;
              angle?: number | null;
              flipH?: boolean | null;
              offsetX?: number | null;
              offsetY?: number | null;
            })[];
          /** Format: misskey:id */
          bannerId?: string | null;
          fields?: {
              name: string;
              value: string;
            }[];
          isLocked?: boolean;
          isExplorable?: boolean;
          hideOnlineStatus?: boolean;
          publicReactions?: boolean;
          carefulBot?: boolean;
          autoAcceptFollowed?: boolean;
          noCrawle?: boolean;
          preventAiLearning?: boolean;
          isBot?: boolean;
          isCat?: boolean;
          injectFeaturedNote?: boolean;
          receiveAnnouncementEmail?: boolean;
          alwaysMarkNsfw?: boolean;
          autoSensitive?: boolean;
          /** @enum {string} */
          followingVisibility?: 'public' | 'followers' | 'private';
          /** @enum {string} */
          followersVisibility?: 'public' | 'followers' | 'private';
          /** Format: misskey:id */
          pinnedPageId?: string | null;
          mutedWords?: unknown[];
          mutedInstances?: string[];
          notificationRecieveConfig?: {
            note?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            follow?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            mention?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            reply?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            renote?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            quote?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            reaction?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            pollEnded?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            receiveFollowRequest?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            followRequestAccepted?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            roleAssigned?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            achievementEarned?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            app?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
            test?: OneOf<[{
              /** @enum {string} */
              type: 'all' | 'following' | 'follower' | 'mutualFollow' | 'never';
            }, {
              /** @enum {string} */
              type: 'list';
              /** Format: misskey:id */
              userListId: string;
            }]>;
          };
          emailNotificationTypes?: string[];
          alsoKnownAs?: string[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['MeDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/move
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'i/move': {
    requestBody: {
      content: {
        'application/json': {
          moveToAccount: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/webhooks/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/webhooks/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          url: string;
          /** @default */
          secret?: string;
          on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** Format: misskey:id */
            id: string;
            /** Format: misskey:id */
            userId: string;
            name: string;
            on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
            url: string;
            secret: string;
            active: boolean;
            /** Format: date-time */
            latestSentAt: string | null;
            latestStatus: number | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/webhooks/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/webhooks/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': ({
              /** Format: misskey:id */
              id: string;
              /** Format: misskey:id */
              userId: string;
              name: string;
              on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
              url: string;
              secret: string;
              active: boolean;
              /** Format: date-time */
              latestSentAt: string | null;
              latestStatus: number | null;
            })[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/webhooks/show
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'i/webhooks/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          webhookId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** Format: misskey:id */
            id: string;
            /** Format: misskey:id */
            userId: string;
            name: string;
            on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
            url: string;
            secret: string;
            active: boolean;
            /** Format: date-time */
            latestSentAt: string | null;
            latestStatus: number | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/webhooks/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/webhooks/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          webhookId: string;
          name: string;
          url: string;
          /** @default */
          secret?: string;
          on: ('mention' | 'unfollow' | 'follow' | 'followed' | 'note' | 'reply' | 'renote' | 'reaction')[];
          active: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * i/webhooks/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'i/webhooks/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          webhookId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * invite/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:invite-codes*
   */
  'invite/create': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['InviteCode'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * invite/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:invite-codes*
   */
  'invite/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          inviteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * invite/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:invite-codes*
   */
  'invite/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 30 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['InviteCode'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * invite/limit
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:invite-codes*
   */
  'invite/limit': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            remaining: number | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * meta
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  meta: {
    requestBody: {
      content: {
        'application/json': {
          /** @default true */
          detail?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            maintainerName: string | null;
            maintainerEmail: string | null;
            version: string;
            providesTarball: boolean;
            name: string;
            shortName: string | null;
            /**
             * Format: url
             * @example https://misskey.example.com
             */
            uri: string;
            description: string | null;
            langs: string[];
            tosUrl: string | null;
            /** @default https://github.com/misskey-dev/misskey */
            repositoryUrl: string | null;
            /** @default https://github.com/misskey-dev/misskey/issues/new */
            feedbackUrl: string | null;
            defaultDarkTheme: string | null;
            defaultLightTheme: string | null;
            disableRegistration: boolean;
            cacheRemoteFiles: boolean;
            cacheRemoteSensitiveFiles: boolean;
            emailRequiredForSignup: boolean;
            enableHcaptcha: boolean;
            hcaptchaSiteKey: string | null;
            enableMcaptcha: boolean;
            mcaptchaSiteKey: string | null;
            mcaptchaInstanceUrl: string | null;
            enableRecaptcha: boolean;
            recaptchaSiteKey: string | null;
            enableTurnstile: boolean;
            turnstileSiteKey: string | null;
            swPublickey: string | null;
            /** @default /assets/ai.png */
            mascotImageUrl: string;
            bannerUrl: string;
            serverErrorImageUrl: string | null;
            infoImageUrl: string | null;
            notFoundImageUrl: string | null;
            iconUrl: string | null;
            maxNoteTextLength: number;
            ads: {
                /**
                 * Format: id
                 * @example xxxxxxxxxx
                 */
                id: string;
                /** Format: url */
                url: string;
                place: string;
                ratio: number;
                /** Format: url */
                imageUrl: string;
                dayOfWeek: number;
              }[];
            /** @default 0 */
            notesPerOneAd: number;
            /** @example false */
            requireSetup: boolean;
            enableEmail: boolean;
            enableServiceWorker: boolean;
            translatorAvailable: boolean;
            proxyAccountName: string | null;
            mediaProxy: string;
            features?: {
              registration: boolean;
              localTimeline: boolean;
              globalTimeline: boolean;
              hcaptcha: boolean;
              recaptcha: boolean;
              objectStorage: boolean;
              serviceWorker: boolean;
              /** @default true */
              miauth?: boolean;
            };
            backgroundImageUrl: string | null;
            impressumUrl: string | null;
            logoImageUrl: string | null;
            privacyPolicyUrl: string | null;
            commerceDisclosureUrl: string | null;
            serverRules: string[];
            themeColor: string | null;
            policies: components['schemas']['RolePolicies'];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * emojis
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  emojis: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            emojis: components['schemas']['EmojiSimple'][];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * emoji
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  emoji: {
    requestBody: {
      content: {
        'application/json': {
          name: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['EmojiDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * miauth/gen-token
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'miauth/gen-token': {
    requestBody: {
      content: {
        'application/json': {
          session: string | null;
          name?: string | null;
          description?: string | null;
          iconUrl?: string | null;
          permission: string[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            token: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * mute/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  'mute/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @description A Unix Epoch timestamp that must lie in the future. `null` means an indefinite mute. */
          expiresAt?: number | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * mute/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  'mute/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * mute/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:mutes*
   */
  'mute/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 30 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Muting'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * renote-mute/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  'renote-mute/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * renote-mute/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:mutes*
   */
  'renote-mute/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * renote-mute/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:mutes*
   */
  'renote-mute/list': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 30 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['RenoteMuting'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * my/apps
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'my/apps': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['App'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  notes: {
    requestBody: {
      content: {
        'application/json': {
          /** @default false */
          local?: boolean;
          reply?: boolean;
          renote?: boolean;
          withFiles?: boolean;
          poll?: boolean;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/children
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/children': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/clips
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/clips': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/conversation
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/conversation': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notes*
   */
  'notes/create': {
    requestBody: {
      content: {
        'application/json': {
          /**
           * @default public
           * @enum {string}
           */
          visibility?: 'public' | 'home' | 'followers' | 'specified';
          visibleUserIds?: string[];
          cw?: string | null;
          /** @default false */
          localOnly?: boolean;
          /**
           * @default null
           * @enum {string|null}
           */
          reactionAcceptance?: null | 'likeOnly' | 'likeOnlyForRemote' | 'nonSensitiveOnly' | 'nonSensitiveOnlyForLocalLikeOnlyForRemote';
          /** @default false */
          noExtractMentions?: boolean;
          /** @default false */
          noExtractHashtags?: boolean;
          /** @default false */
          noExtractEmojis?: boolean;
          /** Format: misskey:id */
          replyId?: string | null;
          /** Format: misskey:id */
          renoteId?: string | null;
          /** Format: misskey:id */
          channelId?: string | null;
          text?: string | null;
          fileIds?: string[];
          mediaIds?: string[];
          poll?: ({
            choices: string[];
            multiple?: boolean;
            expiresAt?: number | null;
            expiredAfter?: number | null;
          }) | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            createdNote: components['schemas']['Note'];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notes*
   */
  'notes/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/favorites/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:favorites*
   */
  'notes/favorites/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/favorites/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:favorites*
   */
  'notes/favorites/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/featured': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          untilId?: string;
          /** Format: misskey:id */
          channelId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/global-timeline
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/global-timeline': {
    requestBody: {
      content: {
        'application/json': {
          /** @default false */
          withFiles?: boolean;
          /** @default true */
          withRenotes?: boolean;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/hybrid-timeline
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/hybrid-timeline': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
          /** @default false */
          allowPartial?: boolean;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default true */
          includeRenotedMyNotes?: boolean;
          /** @default true */
          includeLocalRenotes?: boolean;
          /** @default false */
          withFiles?: boolean;
          /** @default true */
          withRenotes?: boolean;
          /** @default false */
          withReplies?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/local-timeline
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/local-timeline': {
    requestBody: {
      content: {
        'application/json': {
          /** @default false */
          withFiles?: boolean;
          /** @default true */
          withRenotes?: boolean;
          /** @default false */
          withReplies?: boolean;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default false */
          allowPartial?: boolean;
          sinceDate?: number;
          untilDate?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/mentions
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/mentions': {
    requestBody: {
      content: {
        'application/json': {
          /** @default false */
          following?: boolean;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          visibility?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/polls/recommendation
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/polls/recommendation': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/polls/vote
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:votes*
   */
  'notes/polls/vote': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          choice: number;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/reactions
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/reactions': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          type?: string | null;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['NoteReaction'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/reactions/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:reactions*
   */
  'notes/reactions/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          reaction: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/reactions/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:reactions*
   */
  'notes/reactions/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/renotes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/renotes': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/replies
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/replies': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/search-by-tag
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/search-by-tag': {
    requestBody: {
      content: {
        'application/json': {
          /** @default null */
          local?: boolean | null;
          /** @default null */
          reply?: boolean | null;
          /** @default null */
          renote?: boolean | null;
          /**
           * @description Only show notes that have attached files.
           * @default false
           */
          withFiles?: boolean;
          /** @default null */
          poll?: boolean | null;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
          tag?: string;
          /** @description The outer arrays are chained with OR, the inner arrays are chained with AND. */
          query?: string[][];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/search
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/search': {
    requestBody: {
      content: {
        'application/json': {
          query: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @description The local host is represented with `.`. */
          host?: string | null;
          /**
           * Format: misskey:id
           * @default null
           */
          userId?: string | null;
          /**
           * Format: misskey:id
           * @default null
           */
          channelId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'notes/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/state
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/state': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            isFavorited: boolean;
            isMutedThread: boolean;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/thread-muting/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'notes/thread-muting/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/thread-muting/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'notes/thread-muting/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/timeline
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/timeline': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
          /** @default false */
          allowPartial?: boolean;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default true */
          includeRenotedMyNotes?: boolean;
          /** @default true */
          includeLocalRenotes?: boolean;
          /** @default false */
          withFiles?: boolean;
          /** @default true */
          withRenotes?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/translate
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/translate': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
          targetLang: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            sourceLang: string;
            text: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/unrenote
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notes*
   */
  'notes/unrenote': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notes/user-list-timeline
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'notes/user-list-timeline': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
          /** @default false */
          allowPartial?: boolean;
          /** @default true */
          includeMyRenotes?: boolean;
          /** @default true */
          includeRenotedMyNotes?: boolean;
          /** @default true */
          includeLocalRenotes?: boolean;
          /** @default true */
          withRenotes?: boolean;
          /**
           * @description Only show notes that have attached files.
           * @default false
           */
          withFiles?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notifications/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notifications*
   */
  'notifications/create': {
    requestBody: {
      content: {
        'application/json': {
          body: string;
          header?: string | null;
          icon?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notifications/mark-all-as-read
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notifications*
   */
  'notifications/mark-all-as-read': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * notifications/test-notification
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:notifications*
   */
  'notifications/test-notification': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * page-push
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'page-push': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          pageId: string;
          event: string;
          var?: unknown;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:pages*
   */
  'pages/create': {
    requestBody: {
      content: {
        'application/json': {
          title: string;
          name: string;
          summary?: string | null;
          content: {
              [key: string]: unknown;
            }[];
          variables: {
              [key: string]: unknown;
            }[];
          script: string;
          /** Format: misskey:id */
          eyeCatchingImageId?: string | null;
          /**
           * @default sans-serif
           * @enum {string}
           */
          font?: 'serif' | 'sans-serif';
          /** @default false */
          alignCenter?: boolean;
          /** @default false */
          hideTitleWhenPinned?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Page'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:pages*
   */
  'pages/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          pageId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'pages/featured': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Page'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/like
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:page-likes*
   */
  'pages/like': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          pageId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'pages/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          pageId?: string;
          name?: string;
          username?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Page'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/unlike
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:page-likes*
   */
  'pages/unlike': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          pageId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pages/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:pages*
   */
  'pages/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          pageId: string;
          title: string;
          name: string;
          summary?: string | null;
          content: {
              [key: string]: unknown;
            }[];
          variables: {
              [key: string]: unknown;
            }[];
          script: string;
          /** Format: misskey:id */
          eyeCatchingImageId?: string | null;
          /** @enum {string} */
          font?: 'serif' | 'sans-serif';
          alignCenter?: boolean;
          hideTitleWhenPinned?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash*
   */
  'flash/create': {
    requestBody: {
      content: {
        'application/json': {
          title: string;
          summary: string;
          script: string;
          permissions: string[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Flash'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/delete
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash*
   */
  'flash/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          flashId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/featured
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'flash/featured': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Flash'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/like
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
   */
  'flash/like': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          flashId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'flash/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          flashId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Flash'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/unlike
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash-likes*
   */
  'flash/unlike': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          flashId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/update
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:flash*
   */
  'flash/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          flashId: string;
          title: string;
          summary: string;
          script: string;
          permissions: string[];
          /** @enum {string} */
          visibility?: 'public' | 'private';
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/my
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:flash*
   */
  'flash/my': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Flash'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * flash/my-likes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:flash-likes*
   */
  'flash/my-likes': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: id */
              id: string;
              flash: components['schemas']['Flash'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * ping
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  ping: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            pong: number;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * pinned-users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'pinned-users': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailed'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * promo/read
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'promo/read': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          noteId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * roles/list
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'roles/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Role'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * roles/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'roles/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Role'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * roles/users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'roles/users': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: misskey:id */
              id: string;
              user: components['schemas']['UserDetailed'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * roles/notes
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'roles/notes': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          roleId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * subscription/create
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'subscription/create': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          planId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * subscription/manage
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'subscription/manage': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * subscription-plans/list
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'subscription-plans/list': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionPlan'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * subscription-plans/show
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'subscription-plans/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          planId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionPlan'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * request-reset-password
   * @description Request a users password to be reset.
   *
   * **Credential required**: *No*
   */
  'request-reset-password': {
    requestBody: {
      content: {
        'application/json': {
          username: string;
          email: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reset-db
   * @description Only available when running with <code>NODE_ENV=testing</code>. Reset the database and flush Redis.
   *
   * **Credential required**: *No*
   */
  'reset-db': {
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reset-password
   * @description Complete the password reset that was previously requested.
   *
   * **Credential required**: *No*
   */
  'reset-password': {
    requestBody: {
      content: {
        'application/json': {
          token: string;
          password: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * server-info
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'server-info': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            machine: string;
            cpu: {
              model: string;
              cores: number;
            };
            mem: {
              total: number;
            };
            fs: {
              total: number;
              used: number;
            };
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * stats
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  stats: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            notesCount: number;
            originalNotesCount: number;
            usersCount: number;
            originalUsersCount: number;
            instances: number;
            driveUsageLocal: number;
            driveUsageRemote: number;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * sw/show-registration
   * @description Check push notification registration exists.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'sw/show-registration': {
    requestBody: {
      content: {
        'application/json': {
          endpoint: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            userId: string;
            endpoint: string;
            sendReadMessage: boolean;
          } | null;
        };
      };
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * sw/update-registration
   * @description Update push notification registration.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'sw/update-registration': {
    requestBody: {
      content: {
        'application/json': {
          endpoint: string;
          sendReadMessage?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            userId: string;
            endpoint: string;
            sendReadMessage: boolean;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * sw/register
   * @description Register to receive push notifications.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'sw/register': {
    requestBody: {
      content: {
        'application/json': {
          endpoint: string;
          auth: string;
          publickey: string;
          /** @default false */
          sendReadMessage?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** @enum {string} */
            state?: 'already-subscribed' | 'subscribed';
            key: string | null;
            userId: string;
            endpoint: string;
            sendReadMessage: boolean;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * sw/unregister
   * @description Unregister from receiving push notifications.
   *
   * **Credential required**: *No*
   */
  'sw/unregister': {
    requestBody: {
      content: {
        'application/json': {
          endpoint: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * test
   * @description Endpoint for testing input validation.
   *
   * **Credential required**: *No*
   */
  test: {
    requestBody: {
      content: {
        'application/json': {
          required: boolean;
          string?: string;
          /** @default hello */
          default?: string;
          /** @default hello */
          nullableDefault?: string | null;
          /** Format: misskey:id */
          id?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            /** Format: misskey:id */
            id?: string;
            required: boolean;
            string?: string;
            default?: string;
            /** @default hello */
            nullableDefault?: string | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * username/available
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'username/available': {
    requestBody: {
      content: {
        'application/json': {
          username: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            available: boolean;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  users: {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
          /** @enum {string} */
          sort?: '+follower' | '-follower' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt';
          /**
           * @default all
           * @enum {string}
           */
          state?: 'all' | 'alive';
          /**
           * @default local
           * @enum {string}
           */
          origin?: 'combined' | 'local' | 'remote';
          /**
           * @description The local host is represented with `null`.
           * @default null
           */
          hostname?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailed'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/clips
   * @description Show all clips this user owns.
   *
   * **Credential required**: *No*
   */
  'users/clips': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Clip'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/followers
   * @description Show everyone that follows this user.
   *
   * **Credential required**: *No*
   */
  'users/followers': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          userId?: string;
          username?: string;
          /** @description The local host is represented with `null`. */
          host?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Following'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/following
   * @description Show everyone that this user is following.
   *
   * **Credential required**: *No*
   */
  'users/following': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          userId?: string;
          username?: string;
          /** @description The local host is represented with `null`. */
          host?: string | null;
          birthday?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Following'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/gallery/posts
   * @description Show all gallery posts by the given user.
   *
   * **Credential required**: *No*
   */
  'users/gallery/posts': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['GalleryPost'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/get-frequently-replied-users
   * @description Get a list of other users that the specified user frequently replies to.
   *
   * **Credential required**: *No*
   */
  'users/get-frequently-replied-users': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default 10 */
          limit?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              user: components['schemas']['UserDetailed'];
              weight: number;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/featured-notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'users/featured-notes': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          untilId?: string;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/create
   * @description Create a new list of users.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/create': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserList'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/delete
   * @description Delete an existing list of users.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/delete': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/list
   * @description Show all lists that the authenticated user has created.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  'users/lists/list': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserList'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/pull
   * @description Remove a user from a list.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/pull': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/push
   * @description Add a user to an existing list.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/push': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/show
   * @description Show the properties of a list.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  'users/lists/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          /** @default false */
          forPublic?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserList'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/favorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/favorite': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/unfavorite
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/unfavorite': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/update
   * @description Update the properties of a list.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/update': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          name?: string;
          isPublic?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserList'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/create-from-public
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/create-from-public': {
    requestBody: {
      content: {
        'application/json': {
          name: string;
          /** Format: misskey:id */
          listId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserList'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/update-membership
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/lists/update-membership': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          /** Format: misskey:id */
          userId: string;
          withReplies?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/lists/get-memberships
   * @description No description provided.
   *
   * **Credential required**: *No* / **Permission**: *read:account*
   */
  'users/lists/get-memberships': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          listId: string;
          /** @default false */
          forPublic?: boolean;
          /** @default 30 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: misskey:id */
              id: string;
              /** Format: date-time */
              createdAt: string;
              /** Format: misskey:id */
              userId: string;
              user: components['schemas']['UserLite'];
              withReplies: boolean;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/notes
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'users/notes': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default false */
          withReplies?: boolean;
          /** @default true */
          withRenotes?: boolean;
          /** @default false */
          withChannelNotes?: boolean;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
          /** @default false */
          allowPartial?: boolean;
          /** @default false */
          withFiles?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Note'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/pages
   * @description Show all pages this user created.
   *
   * **Credential required**: *No*
   */
  'users/pages': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Page'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/flashs
   * @description Show all flashs this user created.
   *
   * **Credential required**: *No*
   */
  'users/flashs': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['Flash'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/reactions
   * @description Show all reactions this user made.
   *
   * **Credential required**: *No*
   */
  'users/reactions': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          sinceDate?: number;
          untilDate?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['NoteReaction'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/recommendation
   * @description Show users that the authenticated user might be interested to follow.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'users/recommendation': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default 0 */
          offset?: number;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailed'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/relation
   * @description Show the different kinds of relations between the authenticated user and the specified user(s).
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'users/relation': {
    requestBody: {
      content: {
        'application/json': {
          userId: string | string[];
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': OneOf<[{
            /** Format: id */
            id: string;
            isFollowing: boolean;
            hasPendingFollowRequestFromYou: boolean;
            hasPendingFollowRequestToYou: boolean;
            isFollowed: boolean;
            isBlocking: boolean;
            isBlocked: boolean;
            isMuted: boolean;
            isRenoteMuted: boolean;
          }, {
              /** Format: id */
              id: string;
              isFollowing: boolean;
              hasPendingFollowRequestFromYou: boolean;
              hasPendingFollowRequestToYou: boolean;
              isFollowed: boolean;
              isBlocking: boolean;
              isBlocked: boolean;
              isMuted: boolean;
              isRenoteMuted: boolean;
            }[]]>;
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/report-abuse
   * @description File a report.
   *
   * **Credential required**: *Yes* / **Permission**: *write:report-abuse*
   */
  'users/report-abuse': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          comment: string;
          /**
           * @default other
           * @enum {string}
           */
          category?: 'nsfw' | 'spam' | 'explicit' | 'phishing' | 'personalInfoLeak' | 'selfHarm' | 'criticalBreach' | 'otherBreach' | 'spoofing' | 'violationRights' | 'violationRightsOther' | 'other';
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/search-by-username-and-host
   * @description Search for a user by username and/or host.
   *
   * **Credential required**: *No*
   */
  'users/search-by-username-and-host': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** @default true */
          detail?: boolean;
          username?: string | null;
          host?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['User'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/search
   * @description Search for users.
   *
   * **Credential required**: *No*
   */
  'users/search': {
    requestBody: {
      content: {
        'application/json': {
          query: string;
          /** @default 0 */
          offset?: number;
          /** @default 10 */
          limit?: number;
          /**
           * @default combined
           * @enum {string}
           */
          origin?: 'local' | 'remote' | 'combined';
          /** @default true */
          detail?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['User'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/show
   * @description Show the properties of a user.
   *
   * **Credential required**: *No*
   */
  'users/show': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId?: string;
          userIds?: string[];
          username?: string;
          /** @description The local host is represented with `null`. */
          host?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserDetailed'] | components['schemas']['UserDetailed'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/achievements
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'users/achievements': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              name: string;
              unlockedAt: number;
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * users/update-memo
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'users/update-memo': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId: string;
          /** @description A personal memo for the target user. If null or empty, delete the memo. */
          memo: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * fetch-rss
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'fetch-rss': {
    requestBody: {
      content: {
        'application/json': {
          url: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            items: Record<string, never>[];
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * fetch-external-resources
   * @description No description provided.
   *
   * **Internal Endpoint**: This endpoint is an API for the misskey mainframe and is not intended for use by third parties.
   * **Credential required**: *Yes*
   */
  'fetch-external-resources': {
    requestBody: {
      content: {
        'application/json': {
          url: string;
          hash: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            type: string;
            data: string;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * retention
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  retention: {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: date-time */
              createdAt: string;
              users: number;
              data: {
                [key: string]: number;
              };
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * bubble-game/register
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'bubble-game/register': {
    requestBody: {
      content: {
        'application/json': {
          score: number;
          seed: string;
          logs: number[][];
          gameMode: string;
          gameVersion: number;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description To many requests */
      429: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * bubble-game/ranking
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'bubble-game/ranking': {
    requestBody: {
      content: {
        'application/json': {
          gameMode: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
              /** Format: misskey:id */
              id: string;
              score: number;
              user?: components['schemas']['UserLite'];
            }[];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/cancel-match
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'reversi/cancel-match': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId?: string | null;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/games
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'reversi/games': {
    requestBody: {
      content: {
        'application/json': {
          /** @default 10 */
          limit?: number;
          /** Format: misskey:id */
          sinceId?: string;
          /** Format: misskey:id */
          untilId?: string;
          /** @default false */
          my?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['ReversiGameLite'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/match
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'reversi/match': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          userId?: string | null;
          /** @default false */
          noIrregularRules?: boolean;
          /** @default false */
          multiple?: boolean;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['ReversiGameDetailed'];
        };
      };
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/invitations
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *read:account*
   */
  'reversi/invitations': {
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['UserLite'][];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/show-game
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'reversi/show-game': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          gameId: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': components['schemas']['ReversiGameDetailed'];
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/surrender
   * @description No description provided.
   *
   * **Credential required**: *Yes* / **Permission**: *write:account*
   */
  'reversi/surrender': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          gameId: string;
        };
      };
    };
    responses: {
      /** @description OK (without any results) */
      204: {
        content: never;
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  /**
   * reversi/verify
   * @description No description provided.
   *
   * **Credential required**: *No*
   */
  'reversi/verify': {
    requestBody: {
      content: {
        'application/json': {
          /** Format: misskey:id */
          gameId: string;
          crc32: string;
        };
      };
    };
    responses: {
      /** @description OK (with results) */
      200: {
        content: {
          'application/json': {
            desynced: boolean;
            game?: components['schemas']['ReversiGameDetailed'] | null;
          };
        };
      };
      /** @description Client error */
      400: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Authentication error */
      401: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Forbidden error */
      403: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description I'm Ai */
      418: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
};

